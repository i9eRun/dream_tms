/*
 * File: app/view/popup/custViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TmsLabel.view.popup.custViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.popup.cust',

    onComboboxAfterRender_cust_gb: function(component, eOpts) {
        TmsLabel.util.Common.setComboCode(component,168);
        // store가 로드된 후 setValue 실행
        component.getStore().on('load', function(store) {
            const defaultVal = component.defaultValue || "1"; // 외부에서 지정 가능
            component.setValue(defaultVal);
        });
    },

    onComboboxAfterRender_use_yn: function(component, eOpts) {
        TmsLabel.util.Common.setComboCode(component,183);
        // store가 로드된 후 setValue 실행
        component.getStore().on('load', function(store) {
            component.setValue("1");
        });
    },

    onTextfieldAfterRender_search_keyword: function(component, eOpts) {
        const button = this.lookupReference('search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const keyword = this.lookupReference('search_keyword').getValue();
        const useYn = this.lookupReference('use_yn').getValue();
        const cust_gb = this.lookupReference('cust_gb').getValue();


        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            keyword: keyword,
            useYn: useYn,
            custDivGb: cust_gb

        });

        store.load();
    },

    onButtonClick_confirm_button: function(button, e, eOpts) {
        const view = this.getView();
        const grid = this.lookupReference('list_grid');
        const selection = grid.getSelectionModel().getSelection();

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '거래처를 선택해주세요.');
            return;
        }

        const record = selection[0];

        // 부모에게 사용자 정보 전달 (이벤트 방식)
        view.fireEvent('selectRow', view, record);

        // 팝업 닫기
        view.close();
    },

    onButtonClick_cancel_button: function(button, e, eOpts) {
        button.up('window').close();
    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();
        store.getProxy().setUrl(TmsLabel.util.Common.BASE_URL + '/tmslabel/popup/cust/list');
    },

    onGridpanelItemDblClick_list_grid: function(dataview, record, item, index, e, eOpts) {
        const view = this.getView();

        // 부모에게 사용자 정보 전달 (이벤트 방식)
        view.fireEvent('selectRow', view, record);

        // 팝업 닫기
        view.close();
    },

    onGridpanelRowkeydown_teset123: function(tableview, record, element, rowIndex, e, eOpts) {
        const button = this.lookupReference('confirm_button');
        if (e.getKey() === e.ENTER) {

            if (button) {
                button.fireEvent('click', button);
            }
        }
    },

    onWindowBeforeRender_cust_panel: function(component, eOpts) {
        TmsLabel.util.Common.loadCode('173');
    }

});
