/*
 * File: app/view/MainViewViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TmsLabel.view.MainViewViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainview',

    onDatefieldAfterRender_choose_date: function(component, eOpts) {
        component.setValue(new Date());
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const choose_date = this.lookupReference('choose_date').getSubmitValue();

        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            chooseDate: choose_date
        });

        store.load();
    },

    onButtonAfterRender_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onComboboxAfterRender_combo_agency: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();

        // 캐시 없는 기본 스토어 로딩 구성
        // const store = Ext.create('Ext.data.Store', {
        //     fields: ['custCd','custNm'],
        //     proxy: {
        //         type: 'ajax',
        //         url: TmsLabel.util.Common.BASE_URL + '/tmslabel/agency-list',
        //         params: {
        //             userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD
        //         },
        //         reader: { type: 'json'}
        //     }
        // });

        // store.on('load', function(store, records, successful) {
        //     if (successful && Array.isArray(records) && records.length > 0) {
        //         component.setValue(records[0].get('custCd'));
        //         component.getPicker().refresh();
        //     }
        // });

        // component.setStore(store);

        // store.load();





        // 캐시 적용 스토어 구성 버전
        const userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;

        // 캐시가 있으면 즉시 store 반환
        const store = TmsLabel.util.Common.getAgencyStore(userCetCd, function(s, success) {
            if (success) {
                // 콤보박스에 바인딩 (비동기 로딩 완료 시점)
                component.setStore(s);

                if (!component.getValue() && s.getCount() > 0) {
                    component.setValue(s.getAt(0).get('custCd'));
                }

                if (component.getPicker && component.getPicker()) {
                    component.getPicker().refresh();
                }
            } else {
                Ext.Msg.alert('알림', '대행사 목록을 불러오지 못했습니다.');
            }
        });

        // 캐시 히트시에는 위 콜백 이전에 이미 데이터가 들어있는 store가 반환됨
        component.setStore(store);
        if (!component.getValue() && store.getCount() > 0) {
            component.setValue(store.getAt(0).get('custCd'));
        }

    },

    onButtonClick_agency_search_button: function(button, e, eOpts) {

    },

    onButtonAfterRender_agency_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onButtonAfterRender_insert_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onTextfieldAfterRender_chulpan_code: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();

    },

    onTextfieldAfterRender_chulpan_name: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onButtonAfterRender_chulpan_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onGridcolumnAfterRender_grid_col_chulpanNm: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') component.hide();
    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();
        store.getProxy().setUrl(TmsLabel.util.Common.BASE_URL + '/tchu/1001/list');
        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD
        });

        // store.reload();
    },

    onButtonClick_print_chulgo: function(button, e, eOpts) {
        const chooseDateCmp = this.lookupReference('choose_date');
        const chooseDate = chooseDateCmp ? chooseDateCmp.getSubmitValue() : null;
        if (!chooseDate) {
            Ext.Msg.alert('알림', '일자를 선택하세요.');
            return;
        }

        const userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;
        const baseUrl   = TmsLabel.util.Common.BASE_URL || '';
        const url = baseUrl+ '/system/print/pdf/chulgo?chooseDate=' + encodeURIComponent(chooseDate)+ '&userCetCd=' + encodeURIComponent(userCetCd)+ '&_=' + Date.now(); // 캐시 방지

        // 새탭으로 열기 (사용자가 직접 인쇄)
        const win = window.open(url, '_blank');
        if (win) return;

        // 팝업 차단시: iframe으로 로드해서 자동 인쇄 시도
        this.printPdfInHiddenIframe(url);

    },

    onButtonClick_print_label: function(button, e, eOpts) {
        const chk = this.lookupReference('chk_select_print');

        if (chk && chk.getValue()) {
            Ext.Msg.alert('알림', '체크박스가 선택되었습니다.');
        } else {
            Ext.Msg.alert('알림', '체크박스가 선택되지 않았습니다.');
        }
    }

});
