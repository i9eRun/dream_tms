/*
 * File: app/view/MainViewViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TmsLabel.view.MainViewViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainview',

    onDatefieldAfterRender_choose_date: function(component, eOpts) {
        component.setValue(new Date());

        const button = this.lookupReference('search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onDatefieldChange_choose_date: function(field, newValue, oldValue, eOpts) {
        // 로그인 아이디가 드림이 아닐경우는 로직 실행될 필요없음
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') return;

        const combo = this.lookupReference('combo_chulpan');
        if (!combo) return;

        let store = combo.getStore();

        // 아직 콤보에 Ajax 스토어가 바인딩되지 않았다면 안전하게 생성/바인딩
        if (!store || !store.getProxy || store.getProxy().type !== 'ajax') {
            store = Ext.create('Ext.data.Store', {
                fields: ['custCd','custNm'],
                proxy: {
                    type: 'ajax',
                    url: TmsLabel.util.Common.BASE_URL + '/tmslabel/chulpan-list',
                    reader: { type: 'json' },
                    extraParams: {}
                },
                autoLoad: false
            });
            combo.bindStore(store);
        }

        const proxy = store.getProxy();
        proxy.setExtraParam('userCetCd', TmsLabel.util.Common.LOGIN_USER_CET_CD);
        proxy.setExtraParam('chooseDate', Ext.Date.format(newValue, 'Ymd'));

        store.load({
            callback: function(recs, op, ok) {
                if (!ok) { Ext.Msg.alert('알림','출판사 목록을 불러오지 못했습니다.'); return; }
                if (recs.length > 0) combo.setValue(recs[0].get('custCd'));
                else combo.reset();
                if (combo.getPicker) combo.getPicker().refresh();
            }
        });
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const login_cust_cd = TmsLabel.util.Common.LOGIN_CUST_CD;

        if (Ext.isEmpty(login_cust_cd)) return;

        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const choose_date = this.lookupReference('choose_date').getSubmitValue();
        const chulgo_gb = this.lookupReference('chulgo_gb').getValue();
        const chulpan_code = this.lookupReference('chulpan_code').getValue();

        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') {
            store.getProxy().setExtraParams({
                userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                chooseDate: choose_date,
                chulpanCd: login_cust_cd,
                chulgoGb: chulgo_gb
            });

        } else if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '10') {
            store.getProxy().setExtraParams({
                userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                chooseDate: choose_date,
                cetCd: login_cust_cd,
                chulgoGb: chulgo_gb,
                chulpanCd: chulpan_code
            });

        }

        store.load();
    },

    onButtonAfterRender_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onComboboxAfterRender_combo_agency: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') {
            component.hide();
            return;
        }


        // 캐시 없는 기본 스토어 로딩 구성
        // const store = Ext.create('Ext.data.Store', {
        //     fields: ['custCd','custNm'],
        //     proxy: {
        //         type: 'ajax',
        //         url: TmsLabel.util.Common.BASE_URL + '/tmslabel/agency-list',
        //         params: {
        //             userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD
        //         },
        //         reader: { type: 'json'}
        //     }
        // });

        // store.on('load', function(store, records, successful) {
        //     if (successful && Array.isArray(records) && records.length > 0) {
        //         component.setValue(records[0].get('custCd'));
        //         component.getPicker().refresh();
        //     }
        // });

        // component.setStore(store);

        // store.load();





        // 캐시 적용 스토어 구성 버전
        const userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;

        // 캐시가 있으면 즉시 store 반환
        const store = TmsLabel.util.Common.getAgencyStore(userCetCd, function(s, success) {
            if (success) {
                // 콤보박스에 바인딩 (비동기 로딩 완료 시점)
                component.setStore(s);

                if (!component.getValue() && s.getCount() > 0) {
                    component.setValue(s.getAt(0).get('custCd'));
                }

                if (component.getPicker && component.getPicker()) {
                    component.getPicker().refresh();
                }
            } else {
                Ext.Msg.alert('알림', '대행사 목록을 불러오지 못했습니다.');
            }
        });

        // 캐시 히트시에는 위 콜백 이전에 이미 데이터가 들어있는 store가 반환됨
        component.setStore(store);
        if (!component.getValue() && store.getCount() > 0) {
            component.setValue(store.getAt(0).get('custCd'));
        }

    },

    onButtonClick_agency_search_button: function(button, e, eOpts) {




        const login_cust_cd = TmsLabel.util.Common.LOGIN_CUST_CD;

        if (Ext.isEmpty(login_cust_cd)) return;

        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const choose_date = this.lookupReference('choose_date').getSubmitValue();
        const chulgo_gb = this.lookupReference('chulgo_gb').getValue();
        const combo_agency = this.lookupReference('combo_agency').getValue();

        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            chooseDate: choose_date,
            chulgoGb: chulgo_gb,
            cetCd: combo_agency
        });

        store.load();
    },

    onButtonAfterRender_agency_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onComboboxAfterRender_combo_chulpan: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onButtonAfterRender_chulpan_search_button2: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onButtonClick_chulpan_button: function(button, e, eOpts) {

        const login_cust_cd = TmsLabel.util.Common.LOGIN_CUST_CD;

        if (Ext.isEmpty(login_cust_cd)) return;

        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const choose_date = this.lookupReference('choose_date').getSubmitValue();
        const chulgo_gb = this.lookupReference('chulgo_gb').getValue();
        const combo_chulpan = this.lookupReference('combo_chulpan').getValue();

        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            chooseDate: choose_date,
            chulgoGb: chulgo_gb,
            chulpanCd: combo_chulpan
        });

        store.load();
    },

    onButtonAfterRender_insert_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER !== 'dream') component.hide();
    },

    onButtonAfterRender_reset_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onButtonClick_reset_button: function(button, e, eOpts) {
        // const grid = this.lookupReference('list_grid');
        // const store = grid.getStore();

        // store.removeAll();

        // const newRec = store.add({
        //     dunge:1,
        //     transGb: '0',
        //     outYn: '0'
        // })[0];

        // const col = grid.getColumnManager().getColumns().find(c => c.dataIndex === 'sujumCd');

        // const plugin = grid.findPlugin('cellediting');

        // if (plugin && newRec && col) {
        //     plugin.startEdit(newRec, col);
        // }




        const login_cust_cd = TmsLabel.util.Common.LOGIN_CUST_CD;
        if (Ext.isEmpty(login_cust_cd)) return;

        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const choose_date = this.lookupReference('choose_date').getSubmitValue();
        const chulgo_gb = this.lookupReference('chulgo_gb').getValue();
        const chulpan_code = this.lookupReference('chulpan_code').getValue();
        const chulpan_name = this.lookupReference('chulpan_name').getValue();


        // 날짜 유효성 체크 (오늘 이전이면 경고 후 중단)
        const today = Ext.Date.format(new Date(), 'Ymd');
        if (choose_date < today) {
            Ext.Msg.alert('경고', '오늘 이전 날짜에는 새로운 데이터를 입력할 수 없습니다.');
            return;
        }

        // 조회 조건 세팅
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') {
            store.getProxy().setExtraParams({
                userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                chooseDate: choose_date,
                chulpanCd: login_cust_cd,
                chulgoGb: chulgo_gb
            });
        } else if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '10') {
            if (Ext.isEmpty(chulpan_code)) {
                Ext.Msg.alert('알림', '데이터를 입력할 출판사를 선택해주세요.');
                return;
            }
            store.getProxy().setExtraParams({
                userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                chooseDate: choose_date,
                cetCd: login_cust_cd,
                chulgoGb: chulgo_gb,
                chulpanCd: chulpan_code
            });
        }


        // 스토어 리로드 + 새행 추가
        store.load({
            callback: function (recs, op, success) {
                if (success) {
                    // 새 행 생성
                    let newRec;
                    if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') {
                        newRec = Ext.create('TmsLabel.model.TMS_DUNGE_MST', {
                            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                            dunge: 1,
                            dungeDt: choose_date,
                            outYn: '0',
                            transGb: '0'
                        });
                    } else if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '10') {
                        newRec = Ext.create('TmsLabel.model.TMS_DUNGE_MST', {
                            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                            chulpanCd: chulpan_code,
                            chulNm: chulpan_name,
                            dunge: 1,
                            dungeDt: choose_date,
                            outYn: '0',
                            transGb: '0'
                        });
                    }



                    // 마지막에 추가
                    store.insert(store.getCount(), newRec);
                    const plugin = grid.findPlugin('cellediting');
                    const sujumCol = grid.getColumnManager().getColumns().find( c => c.dataIndex === 'sujumCd');
                    if (plugin && sujumCol) {
                        Ext.defer( () => {
                            plugin.startEdit(newRec, sujumCol);
                        }, 100);
                    }

                }
            }
        });





    },

    onButtonAfterRender_save_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onButtonClick_save_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();

        // 상단 날짜 필드 값 가져오기
        const chooseDateCmp = this.lookupReference('choose_date');
        const chooseDate = chooseDateCmp ? chooseDateCmp.getSubmitValue() : null;

        const newRecs = store.getNewRecords();
        const updated = store.getUpdatedRecords();
        const removed = store.getRemovedRecords();

        const data = {
            insertId: TmsLabel.util.Common.LOGIN_USER,
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            loginCustDivGb: TmsLabel.util.Common.LOGIN_CUST_DIV_GB, // 로그인 구분값
            loginCustName: TmsLabel.util.Common.LOGIN_CUST_NAME,
            loginCustCd: TmsLabel.util.Common.LOGIN_CUST_CD,      // 로그인 출판사 코드
            insertList: [],
            updateList: [],
            deleteList: []
        };

        // 추가 + 수정
        Ext.Array.each(newRecs.concat(updated), function (rec) {
            const qty = rec.get('qty');
            const dunge = rec.get('dunge');

            if (!Ext.isEmpty(qty) && !Ext.isEmpty(dunge)) {
                const rowData = Ext.apply({}, rec.getData()); // 얕은 복사

                // 공통 필드 보정 (PK 및 감사정보)
                rowData.userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;
                rowData.insertId = TmsLabel.util.Common.LOGIN_USER_ID;

                // 신규행일 경우 DUNGE_DT 세팅
                if (rec.phantom && chooseDate) {
                    rowData.dungeDt = chooseDate;
                }

                if (rec.phantom) {
                    data.insertList.push(rowData);
                } else {
                    data.updateList.push(rowData);
                }
            }
        });

        // 삭제행 처리 (PK만 보내도 됨, 하지만 전체 데이터 보내도 무방)
        Ext.Array.each(removed, function (rec) {
            const rowData = Ext.apply({}, rec.getData());
            rowData.userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;
            data.deleteList.push(rowData);
        });

        // 저장할 데이터 없으면 중단
        if (data.insertList.length === 0 &&
        data.updateList.length === 0 &&
        data.deleteList.length === 0) {
            Ext.Msg.alert('알림', '저장할 데이터가 없습니다.');
            return;
        }

        // 서버 호출
        Ext.Msg.confirm('확인', '저장하시겠습니까?', function(btn) {
            if (btn !== 'yes') return; // '아니오' 선택 시 중단

            // 서버 호출
            Ext.Ajax.request({
                url: TmsLabel.util.Common.BASE_URL + '/tmslabel/save',
                method: 'POST',
                jsonData: data,
                success: function () {
                    Ext.Msg.alert('성공', '저장이 완료되었습니다.');
                    store.commitChanges();
                    store.reload();
                },
                failure: function () {
                    Ext.Msg.alert('실패', '저장 중 오류가 발생했습니다.');
                }
            });
        });
    },

    onTextfieldAfterRender_chulpan_code: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();

    },

    onTextfieldAfterRender_chulpan_name: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') {
            component.hide();
            return;
        }



    },

    onTextfieldSpecialkey_chulpan_name: function(field, e, eOpts) {
        const button = this.lookupReference('chulpan_search_button');
        if (e.getKey() === e.ENTER) {
            if (button) button.fireEvent('click', button);
        }
    },

    onButtonAfterRender_chulpan_search_button: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1' || TmsLabel.util.Common.LOGIN_USER === 'dream') component.hide();
    },

    onButtonClick_chulpan_search_button: function(button, e, eOpts) {
        const popup = Ext.create('TmsLabel.view.popup.cust');
        const me = this;
        const keyword = this.lookupReference('chulpan_name').getValue();

        popup.on('afterrender', function(win) {
            if (!Ext.isEmpty(keyword)) {
                const searchField = win.lookupReference('search_keyword');
                if (searchField) searchField.setValue(keyword);

                const btn = win.lookupReference('search_button');
                if (btn) btn.fireEvent('click', btn);
            }
        });

        popup.on('selectRow', function(win, record) {
            const form = me.lookupReference('list_grid');

            me.lookupReference('chulpan_code').setValue(record.get('CUST_CD'));
            me.lookupReference('chulpan_name').setValue(record.get('CUST_ABBR_NM'));

            console.log(record);

        });

        popup.show();

    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        if (!grid) {
            Ext.Msg.alert('오류', '그리드를 찾을 수 없습니다.');
            return;
        }

        const store = grid.getStore();
        const rec = grid.getSelection()[0];

        if (!rec) {
            Ext.Msg.alert('알림', '삭제할 행을 선택하세요.');
            return;
        }

        const transGb = String(!Ext.isEmpty(rec.get('transGb')) ? rec.get('transGb') : '').trim();
        if (transGb === '1') {
            Ext.Msg.alert('알림', '전송된 데이터는 삭제가 불가합니다.');
            return;
        }

        Ext.Msg.confirm('확인', '선택된 데이터를 삭제하시겠습니까?', function (btn) {
            if (btn !== 'yes') return;

            store.remove(rec);

            Ext.toast('삭제 행이 저장 목록에 추가되었습니다. "저장"을 눌러야 최종 반영됩니다.');
        });
    },

    onGridcolumnAfterRender_grid_col_chulpanNm: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') component.hide();
    },

    onTextfieldSpecialkey_sujum_cd: function(field, e, eOpts) {
        const me = this;

        if (e.getKey() === e.ENTER) {
            const keyword = field.getValue();

            // 기존 팝업이 열려있으면 제거
            const oldPopup = Ext.ComponentQuery.query('window[tmsPopupType=cust]')[0];
            if (oldPopup) {
                oldPopup.close(); // close()가 destroy까지 처리됨
            }

            // 새 팝업 생성
            const popup = Ext.create('TmsLabel.view.popup.cust', {
                tmsPopupType: 'cust'   // 식별용 custom 속성
            });

            popup.on('afterrender', function(win) {
                const custGbField = win.lookupReference('cust_gb');
                if (custGbField) {
                    custGbField.getStore().on('load', function () {
                        custGbField.setValue('2');
                    }, { single:true });
                    }

                    if (!Ext.isEmpty(keyword)) {
                        const searchField = win.lookupReference('search_keyword');
                        if (searchField) searchField.setValue(keyword);

                        const btn = win.lookupReference('search_button');
                        if (btn) {
                            btn.fireEvent('click', btn);

                            const grid = win.lookupReference('list_grid');
                            if (grid) {
                                const store = grid.getStore();

                                // 안전한 handler 정의
                                const onStoreLoad = function(st, recs) {
                                    if (!win.isDestroyed && grid && grid.rendered && recs && recs.length > 0) {
                                        grid.getSelectionModel().select(0);
                                        const view = grid.getView();
                                        if (view) {
                                            Ext.defer(() => {
                                                if (!win.isDestroyed && view.el) {
                                                    view.focusRow(0);
                                                }
                                            }, 50);
                                        }
                                    }
                                };

                                store.on('load', onStoreLoad, { single: true });

                                // 팝업 닫힐 때 이벤트 해제
                                win.on('close', function() {
                                    store.un('load', onStoreLoad);
                                });
                            }
                        }
                    }
                });


                popup.on('selectRow', function(win, record) {
                    const grid = me.lookupReference('list_grid');
                    const plugin = grid.findPlugin('cellediting');

                    // 현재 편집중이던 레코드
                    const editingRec = plugin.context ? plugin.context.record : null;

                    if (editingRec) {
                        // 팝업에서 가져온 데이터를 현재 그리드 로우에 세팅
                        editingRec.set('sujumCd', record.get('CUST_CD'));
                        editingRec.set('courseCd', record.get('DELIV_PATH_CD'));
                        editingRec.set('jiyukNm', record.get('JIYUK_NM'));
                        editingRec.set('sujumNm', record.get('CUST_NM'));
                        editingRec.set('chulgoGb', record.get('CHULGO_GB'));
                        if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '10') {
                            editingRec.set('cetCd', TmsLabel.util.Common.LOGIN_CUST_CD);
                        }

                        // qty(부수) 컬럼으로 편집가능한 상태로 이동
                        const qtyCol = grid.getColumnManager().getColumns().find(c => c.dataIndex === 'qty');

                        if (qtyCol) {
                            Ext.defer( () => {
                                plugin.startEdit(editingRec, qtyCol);
                            }, 50);
                        }

                    }

                    win.close(); // 팝업 닫기

                });

                popup.show();
            }

    },

    onTextfieldSpecialkey_qty: function(field, e, eOpts) {
        const grid   = this.lookupReference('list_grid');
        const plugin = grid.findPlugin('cellediting');
        const record = field.getWidgetRecord ? field.getWidgetRecord() : plugin.context.record;
        if (e.getKey() === Ext.EventObject.ENTER || e.getKey() === Ext.EventObject.TAB) {
            if (!record) return;

            // "dunge" 컬럼을 찾아서 바로 편집 시작
            const dungeCol = grid.down('gridcolumn[dataIndex=dunge]');
            if (dungeCol) {
                plugin.completeEdit(); // 현재 에디트 확실히 종료
                // 딜레이를 주고 실행해야 확실하게 편집모드 진입
                Ext.defer(function() {
                    plugin.startEdit(record, dungeCol);
                }, 50);
            }
        }
    },

    onTextfieldSpecialkey_dunge: function(field, e, eOpts) {
        const grid   = this.lookupReference('list_grid');
        const plugin = grid.findPlugin('cellediting');
        const record = field.getWidgetRecord ? field.getWidgetRecord() : plugin.context.record;
        if (e.getKey() === Ext.EventObject.ENTER || e.getKey() === Ext.EventObject.TAB) {
            if (!record) return;

            // "dunge" 컬럼을 찾아서 바로 편집 시작
            const bigoCol = grid.down('gridcolumn[dataIndex=bigo]');
            if (bigoCol) {
                plugin.completeEdit(); // 현재 에디트 확실히 종료
                // 딜레이를 주고 실행해야 확실하게 편집모드 진입
                Ext.defer(function() {
                    plugin.startEdit(record, bigoCol);
                }, 50);
            }
        }
    },

    onTextfieldSpecialkey_bigo: function(field, e, eOpts) {
        const me = this;

        if (e.getKey() === e.ENTER || e.getKey() === e.TAB ) {
            const grid = me.lookupReference('list_grid');
            const store = grid.getStore();
            const plugin = grid.findPlugin('cellediting');
            const record = field.getWidgetRecord ? field.getWidgetRecord() : plugin.context.record;
            const rowIndex = store.indexOf(record);
            const lastIndex = store.getCount() - 1;
            const sujumCdCol = grid.getColumnManager().getColumns().find(c => c.dataIndex === 'sujumCd');

            e.stopEvent();

            if (rowIndex === lastIndex) {
                const chulgoGb = record.get('chulgoGb');

                let rowData = {
                    courseCd: record.get('courseCd'),
                    chulgoGb: chulgoGb,
                    dunge: 1,
                    transGb: '0',
                    outYn: '0'
                };

                // 대행사 로그인일 경우, 현재 행의 출판사 코드/명 복사
                if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '10') {
                    rowData.chulpanCd = record.get('chulpanCd');
                    rowData.chulNm = record.get('chulNm');
                    rowData.cetCd = TmsLabel.util.Common.LOGIN_CUST_CD;
                }

                if (TmsLabel.util.Common.LOGIN_CUST_DIV_GB === '1') {
                    rowData.chulpanCd = TmsLabel.util.Common.LOGIN_CUST_CD;
                    rowData.chulNm = TmsLabel.util.Common.LOGIN_CUST_NAME;
                }

                // 새로운 행 추가
                const newRec = store.add(rowData)[0];

                if (plugin && newRec && sujumCdCol) {
                    Ext.defer( () => plugin.startEdit(newRec, sujumCdCol), 50);
                }

            } else {
                const nextRec = store.getAt(rowIndex + 1);
                if (plugin && nextRec && sujumCdCol) {
                    Ext.defer(()=>plugin.startEdit(nextRec, sujumCdCol), 50);
                }
            }

        }
    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();
        store.getProxy().setUrl(TmsLabel.util.Common.BASE_URL + '/tmslabel/list');
        store.getProxy().setExtraParams({
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD
        });

        // store.reload();
    },

    onButtonClick_trans_button: function(button, e, eOpts) {
        var me    = this;
        var grid  = me.lookupReference('list_grid');

        if (!grid) {
            Ext.Msg.alert('오류', '그리드를 찾을 수 없습니다.');
            return;
        }

        var store   = grid.getStore();
        var records = store.getRange();
        var targets = [];

        // 미전송(transGb !== '1')만 수집
        Ext.Array.each(records, function (r) {
            var transGb = Ext.String.trim(String(r.get('transGb') || ''));
            if (transGb !== '1') {
                targets.push({
                    userCetCd: r.get('userCetCd') || TmsLabel.util.Common.LOGIN_USER_CET_CD,
                    rowSeq   : r.get('rowSeq'),
                    ordNo    : r.get('ordNo'),
                    updateId : TmsLabel.util.Common.LOGIN_USER
                });
            }
        });

        if (targets.length === 0) {
            Ext.Msg.alert('알림', '전송할 데이터가 없습니다. (모두 전송 상태)');
            return;
        }

        Ext.Msg.confirm('확인', '미전송 ' + targets.length + '건을 전송 상태로 변경하시겠습니까?', function (btn) {
            if (btn !== 'yes') return;

            var btnTransfer = me.lookupReference('transfer_button');
            if (btnTransfer) { btnTransfer.setDisabled(true); }
            grid.setLoading('전송 중...');

            Ext.Ajax.request({
                url    : TmsLabel.util.Common.BASE_URL + '/tmslabel/transfer',
                method : 'POST',
                jsonData: { items: targets },
                timeout: 30000,
                success: function (resp) {
                    var res = Ext.decode(resp.responseText || '{}', true) || {};
                    var updated = res.updated || 0;
                    var failed  = res.failed  || 0;

                    if (Ext.isArray(res.successKeys)) {
                        // 성공 키로 화면만 부분 갱신
                        var keyMap = {};
                        Ext.Array.each(res.successKeys, function (k) {
                            var key = (k.userCetCd || '') + '|' + (k.rowSeq || '') + '|' + (k.ordNo || '');
                            keyMap[key] = true;
                        });
                        Ext.Array.each(store.getRange(), function (rec) {
                            var key = (rec.get('userCetCd') || '') + '|' + (rec.get('rowSeq') || '') + '|' + (rec.get('ordNo') || '');
                            if (keyMap[key]) {
                                rec.set('transGb', '1');
                            }
                        });
                        store.commitChanges();
                    } else {
                        // 성공 키를 안 내려주면 전체 재조회
                        store.reload();
                    }

                    Ext.toast('전송 완료: ' + updated + '건' + (failed ? ', 실패 ' + failed + '건' : ''));
                },
                failure: function (resp) {
                    var obj = Ext.decode(resp.responseText || '{}', true) || {};
                    Ext.Msg.alert('오류', obj.message || '전송 중 오류가 발생했습니다.');
                },
                callback: function () {
                    grid.setLoading(false);
                    if (btnTransfer) { btnTransfer.setDisabled(false); }
                }
            });
        });
    },

    onButtonClick_print_chulgo: function(button, e, eOpts) {
        const grid  = this.lookupReference('list_grid');
        const store = grid.getStore();

        if (!store || store.getCount() === 0) {
            Ext.Msg.alert('알림', '출고증을 출력할 데이터가 없습니다.');
            return;
        }

        const ordNos = [];
        store.each(function(rec) {
            ordNos.push(rec.get('ordNo'));
        });


        const userCetCd = TmsLabel.util.Common.LOGIN_USER_CET_CD;
        const custDivGb = TmsLabel.util.Common.LOGIN_CUST_DIV_GB;
        const custName = TmsLabel.util.Common.LOGIN_CUST_NAME;
        const baseUrl   = TmsLabel.util.Common.BASE_URL || '';
        const url       = baseUrl + '/tmslabel/print/chulgo';

        Ext.Msg.confirm('확인', '출고증을 출력하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = url;
                form.target = '_blank';

                const inputOrdNos = document.createElement('input');
                inputOrdNos.type = 'hidden';
                inputOrdNos.name = 'ordNos';
                inputOrdNos.value = JSON.stringify(ordNos);
                form.appendChild(inputOrdNos);

                const inputUser = document.createElement('input');
                inputUser.type = 'hidden';
                inputUser.name = 'userCetCd';
                inputUser.value = userCetCd;
                form.appendChild(inputUser);

                const inputCustDivGb = document.createElement('input');
                inputCustDivGb.type = 'hidden';
                inputCustDivGb.name = 'custDivGb';
                inputCustDivGb.value = custDivGb;
                form.appendChild(inputCustDivGb);

                const inputCustNm = document.createElement('input');
                inputCustNm.type = 'hidden';
                inputCustNm.name = 'custName';
                inputCustNm.value = custName;
                form.appendChild(inputCustNm);

                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
            }
        });

    },

    onButtonClick_print_label: function(button, e, eOpts) {
        /*
        const view = this.getView();
        const grid = view.lookupReference('list_grid');
        const chkSelect = view.lookupReference('chk_select_print');
        const store = grid.getStore();

        // 출력할 아이템 데이터 수집
        let recs = [];
        if (chkSelect && chkSelect.getValue()) {
            recs = grid.getSelection();
            if (!recs || recs.length === 0) {
                Ext.Msg.alert('알림', '선택 출력이 체크되어 있습니다. 그리드에서 데이터를 선택하세요.');
                return;
            }
        } else {
            recs = store.getRange();
            if (!recs || recs.length === 0) {
                Ext.Msg.alert('알림', '출력할 데이터가 없습니다.');
                return;
            }
        }


        // 서버로 전송할 페이로드 구성
        const payload = {
            userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
            updateId:  TmsLabel.util.Common.LOGIN_USER,
            copiesPerItem: 2,          // 한 쌍(2부)
            updateOutYn: true,         // 출력 후 OUT_YN=1 업데이트
            items: recs.map(r => ({
                rowSeq:   r.get('rowSeq'),
                ordNo:    r.get('ordNo'),
                sujumCd:  r.get('sujumCd'),
                sujumNm:  r.get('sujumNm')
            }))
        };

        Ext.Ajax.request({
            url: TmsLabel.util.Common.BASE_URL + '/tmslabel/label/print',
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            jsonData: payload,

            binary: true,

            success: function (resp) {
                var bytes = resp.responseBytes || resp.response; // Ext 버전에 따라 다름
                if (!bytes) {
                    Ext.Msg.alert('오류', 'PDF 응답이 비어있습니다.');
                    return;
                }
                var blob = new Blob([bytes], { type: 'application/pdf' });
                var url  = URL.createObjectURL(blob);

                var win = window.open(url, '_blank');
                if (!win) {
                    var iframe = document.getElementById('hidden_pdf_iframe_for_labels') || (function(){
                        var f = document.createElement('iframe');
                        f.id = 'hidden_pdf_iframe_for_labels';
                        f.style.position = 'fixed'; f.style.right = '-10000px'; f.style.bottom = '-10000px';
                        document.body.appendChild(f);
                        return f;
                    })();
                    iframe.onload = function(){ try{ iframe.contentWindow.focus(); iframe.contentWindow.print(); }catch(e){} };
                    iframe.src = url;
                }

                grid.getStore().reload();
                Ext.toast('라벨 PDF 생성 완료 (OUT_YN=1 반영)');
            },

            failure: function (resp) {
                // 500일 때도 여기로 들어옵니다. 바이너리 모드에서도 안전하게 에러 메시지 추출
                var msg = '';
                try {
                    if (resp.responseText) msg = resp.responseText;
                    else if (resp.responseBytes) msg = new TextDecoder().decode(new Uint8Array(resp.responseBytes));
                } catch(e){}
                    Ext.Msg.alert('서버 오류', '라벨 생성 실패 (HTTP '+resp.status+'). ' + (msg ? msg.substring(0,300) : ''));
                }
            });

            */



            const view = this.getView();
            const grid = view.lookupReference('list_grid');
            const chkSelect = view.lookupReference('chk_select_print');
            const store = grid.getStore();

            // 출력데이터 수집
            let recs = [];
            if (chkSelect && chkSelect.getValue()) {
                recs = grid.getSelection();
                if (!recs || recs.length === 0) {
                    Ext.Msg.alert('알림', '선택 출력이 체크되어 있습니다. 그리드에서 데이터를 선택하세요.');
                    return;
                }
            } else {
                recs = store.getRange();
                if (!recs || recs.length === 0) {
                    Ext.Msg.alert('알림', '출력할 데이터가 없습니다.');
                    return;
                }
            }


            // 총 출력 매수(= 각 행의 dunge 합, 최소 1)
            const sumCopies = recs.reduce((acc, r) => {
                const d = parseInt(r.get('dunge'), 10);
                return acc + (isNaN(d) || d < 1 ? 1 : d);
            }, 0);

            const isSelectMode = !!(chkSelect && chkSelect.getValue());
            const modeText = isSelectMode ? '선택한' : '그리드 전체';
            const msg = `${modeText} <b>${recs.length}</b>건의 라벨을 <b>덩이 개수</b>만큼 출력합니다.<br>` + `<br>진행하시겠습니까?`;

            Ext.Msg.confirm('라벨 출력 확인', msg, (btn) => {
                if (btn !== 'yes') return;

                const payload = {
                    userCetCd: TmsLabel.util.Common.LOGIN_USER_CET_CD,
                    updateId: TmsLabel.util.Common.LOGIN_USER,
                    updateOutYn: true,
                    items: recs.map(r => ({
                        rowSeq: r.get('rowSeq'),
                        ordNo: r.get('ordNo'),
                        sujumCd: r.get('sujumCd'),
                        sujumNm: r.get('sujumNm'),
                        courseCd: r.get('courseCd'),
                        dunge: r.get('dunge'),
                        qty: r.get('qty'),
                        chulpanNm: r.get('chulpanNm'),
                        jiyukNm:r.get('jiyukNm')
                    }))
                };

                Ext.Ajax.request({
                    url: TmsLabel.util.Common.BASE_URL + '/tmslabel/label/print',
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    jsonData: payload,
                    binary: true,

                    success: function (resp) {
                        var bytes = resp.responseBytes || resp.response;
                        if (!bytes) {
                            Ext.Msg.alert('오류', 'PDF 응답이 비어있습니다.');
                            return;
                        }
                        var blob = new Blob([bytes], { type: 'application/pdf' });
                        var url  = URL.createObjectURL(blob);

                        var win = window.open(url, '_blank');
                        if (!win) {
                            var iframe = document.getElementById('hidden_pdf_iframe_for_labels') || (function(){
                                var f = document.createElement('iframe');
                                f.id = 'hidden_pdf_iframe_for_labels';
                                f.style.position = 'fixed';
                                f.style.right = '-10000px';
                                f.style.bottom = '-10000px';
                                document.body.appendChild(f);
                                return f;
                            })();
                            iframe.onload = function(){ try{ iframe.contentWindow.focus(); iframe.contentWindow.print(); }catch(e){} };
                            iframe.src = url;
                        }
                        grid.getStore().reload();
                        Ext.toast('라벨 PDF 생성 완료 (OUT_YN=1 반영)');
                    },

                    failure: function (resp) {
                        var m = '';
                        try {
                            if (resp.responseText) m = resp.responseText;
                            else if (resp.responseBytes) m = new TextDecoder().decode(new Uint8Array(resp.responseBytes));
                        } catch(e){}
                            Ext.Msg.alert('서버 오류', '라벨 생성 실패 (HTTP '+resp.status+'). ' + (m ? m.substring(0,300) : ''));
                        }

                    });

                });











    },

    onPanelAfterRender_chulgo: function(component, eOpts) {
        if (TmsLabel.util.Common.LOGIN_USER === 'dream') {
            const btnTrans   = this.lookupReference('trans_button');
            const btnChulgo  = this.lookupReference('print_chulgo');
            const btnLabel   = this.lookupReference('print_label');

            if (btnTrans)  btnTrans.setHidden(true);
            if (btnChulgo) btnChulgo.setHidden(true);
            if (btnLabel)  btnLabel.setHidden(true);
        }
    },

    onLabelAfterRender_welcome: function(component, eOpts) {
        component.setText(TmsLabel.util.Common.LOGIN_CUST_NAME + '님 안녕하세요!');
    },

    onViewportBeforeRender_main_panel: function(component, eOpts) {
        TmsLabel.util.Common.loadCode('173');
    }

});
