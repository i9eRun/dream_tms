/*
 * File: app/view/tsys/tsys1004ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsys.tsys1004ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsys.tsys1004',

    onGridpanelAfterRender_tsys1004_user_grid: function(component, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1004_user_grid]')[0];
        const store = grid.getStore();

        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/course/userlist');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store.reload();
    },

    onGridpanelAfterRender_tsys1004_cus_grid: function(component, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1004_cus_grid]')[0];
        const store = grid.getStore();

        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/course/list');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store.reload();
    },

    onTsys1004_save_buttonClick: function(button, e, eOpts) {
        const courseGrid = this.lookupReference('tsys1004_cus_grid');
        const userGrid = this.lookupReference('tsys1004_user_grid');

        const selectedCourses = courseGrid.getSelectionModel().getSelection(); // CUS_CD
        const selectedUsers = userGrid.getSelectionModel().getSelection();     // USER_ID


        if (selectedCourses.length === 0 || selectedUsers.length === 0) {
            Ext.Msg.alert('알림', '코스와 사용자 모두 선택해주세요.');
            return;
        }


        Ext.Msg.confirm('확인', '선택한 코스 권한을 저장하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const data = [];
            const login_user = dream.util.Common.LOGIN_USER;

            selectedCourses.forEach(course => {
                selectedUsers.forEach(user => {
                    data.push({
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        userId: user.get('userId'),
                        cusCd: course.get('cusCd'),
                        insertId: login_user
                    });
                });
            });

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/cusmenu/insert',
                method: 'POST',
                jsonData: data,
                headers: { 'Content-Type': 'application/json' },
                success: function(response) {
                    Ext.Msg.alert('성공', '코스 권한이 저장되었습니다.');
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '저장 중 오류가 발생했습니다.');
                }
            });
        });
    },

    onTsys1004_init_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1004_user_grid]')[0];
        const store = grid.getStore();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            keyword: ""
        });

        store.reload();

        const grid2 = Ext.ComponentQuery.query('grid[reference=tsys1004_cus_grid]')[0];
        const store2 = grid2.getStore();

        store2.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store2.reload();
    },

    onTsys1004_course_confirm_buttonClick: function(button, e, eOpts) {
        const userGrid = this.lookupReference('tsys1004_user_grid');
        const courseGrid = this.lookupReference('tsys1004_cus_grid');

        const selectedUser = userGrid.getSelectionModel().getSelection()[0];

        if (!selectedUser) {
            Ext.Msg.alert('알림', '사용자를 선택해주세요.');
            return;
        }

        const userId = selectedUser.get('userId');
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/course/usercuslist',
            method: 'get',
            params:{
                userCetCd: userCetCd,
                userId: userId
            },
            success: function(response) {
                const cusList = Ext.decode(response.responseText);

                const store = courseGrid.getStore();
                const sm = courseGrid.getSelectionModel();
                sm.deselectAll();

                const toSelect = [];

                store.each(function(rec) {
                    if (cusList.includes(rec.get('cusCd'))) {
                        toSelect.push(rec);
                    }
                });

                sm.select(toSelect);
            },
            failure: function() {
                Ext.Msg.alert('오류', '코스 권한 조회에 실패했습니다.');
            }
        });
    },

    onTsys1004_search_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1004_user_grid]')[0];
        const store = grid.getStore();
        const keyword = Ext.getCmp('tsys1004_search_keyword').getValue();

        //store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/course/userlist');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            keyword: keyword
        });

        store.reload();
    },

    onTsys1004_search_keywordAfterRender: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = Ext.getCmp('tsys1004_search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onPanelBeforeRender_tsys1004_panel: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1001',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1001', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1002',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1002', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1003',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1003', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1004',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1004', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1005',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1005', codeList);
            }
        });

    }

});
