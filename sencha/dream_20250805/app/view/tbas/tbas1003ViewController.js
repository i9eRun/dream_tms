/*
 * File: app/view/tbas/tbas1003ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1003ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1003',

    onGridpanelAfterRender_cet_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1003/cet-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        // 3. 스토어 리로드
        store.reload();
    },

    onGridpanelSelectionChange_cet_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const cet_publish_grid = this.lookupReference('cet_publish_grid');
        const cet_publish_store = cet_publish_grid.getStore();
        const cet_cd = selected[0].get('custCd');

        if (cet_cd) {
            cet_publish_store.getProxy().setExtraParams({
                userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                cetCd: cet_cd
            });


            // store reload + 필드 변환 처리
            cet_publish_store.load({
                callback: function(records, operation, success) {
                    if (success) {
                        records.forEach(function(record) {
                            ['centerPrtYn', 'banpNotYn'].forEach(function(field) {
                                const val = record.get(field);
                                record.set(field, val === '1' || val === 1);
                            });
                        });
                    }
                }
            });
        }

    },

    onGridpanelAfterRender_cet_publish_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1003/cet-publish-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

    },

    onComboboxAfterRender_baebonCd: function(component, eOpts) {
        dream.util.Common.setComboCode(component,111,false);
    },

    onComboboxAfterRender_partCd: function(component, eOpts) {
        dream.util.Common.setComboCode(component,243,false);
    },

    onComboboxAfterRender_chulpanPrtGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,288,false);
    },

    onComboboxAfterRender_sujumPrtGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,288,false);
    },

    onGridpanelAfterRender_publish_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1003/publish-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

    },

    onTextfieldAfterRender_cet_keyword: function(component, eOpts) {
        const button = this.lookupReference('cet_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldAfterRender_cet_publish_keyword: function(component, eOpts) {

    },

    onTextfieldAfterRender_publish_keyword: function(component, eOpts) {
        const button = this.lookupReference('publish_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_cet_search_button: function(button, e, eOpts) {
        const view = this.getView();
        const store = view.lookupReference('cet_grid').getStore();
        const keyword = view.lookupReference('cet_keyword').getValue();

        store.getProxy().setExtraParams({
            keyword: keyword,
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store.reload();
    },

    onButtonClick_cet_publish_search_button: function(button, e, eOpts) {

    },

    onButtonClick_publish_search_button: function(button, e, eOpts) {
        const view = this.getView();
        const store = view.lookupReference('publish_grid').getStore();
        const keyword = view.lookupReference('publish_keyword').getValue();

        store.getProxy().setExtraParams({
            keyword: keyword,
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store.reload();
    },

    onButtonClick_insert_button: function(button, e, eOpts) {
        const view = this.getView();
        const cet_publish_grid = this.lookupReference('cet_publish_grid');
        const store = cet_publish_grid.getStore();
        const newRecords = store.getNewRecords();
        const cetCd = view.selectedCetCd;

        if (newRecords.length === 0) {
            Ext.Msg.alert('알림', '추가된 행이 없습니다.');
            return;
        }

        // 저장 확인 팝업
        Ext.Msg.confirm('확인', '저장하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;  // 취소 시 중단

            const payload = newRecords.map(r => {
                const data = r.getData();
                data.cetCd = cetCd;
                data.insertId = dream.util.Common.LOGIN_USER;

                ['centerPrtYn', 'banpNotYn'].forEach(field => {
                    data[field] = data[field] === true ? '1' :
                    data[field] === false ? '0' : data[field];
                });

                return data;
            });

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1003/insert',
                method: 'POST',
                jsonData: payload,
                success: function() {
                    Ext.Msg.alert('성공', '저장되었습니다.');
                    store.commitChanges();
                },
                failure: function() {
                    Ext.Msg.alert('오류', '저장 실패');
                }
            });
        });
    },

    onButtonClick_update_button: function(button, e, eOpts) {
        const grid = this.lookupReference('cet_publish_grid');
        const store = grid.getStore();
        const updatedRecords = store.getUpdatedRecords();

        if (updatedRecords.length === 0) {
            Ext.Msg.alert('알림', '수정된 항목이 없습니다.');
            return;
        }

        Ext.Msg.confirm('확인', '수정된 데이터를 저장하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const payload = updatedRecords.map(r => {
                const data = r.getData();
                data.updateId = dream.util.Common.LOGIN_USER;
                data.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
                ['centerPrtYn', 'banpNotYn'].forEach(field => {
                    data[field] = data[field] === true ? '1' :
                    data[field] === false ? '0' : data[field];
                });
                return data;
            });

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1003/update',
                method: 'POST',
                jsonData: payload,
                success: function() {
                    Ext.Msg.alert('성공', '수정되었습니다.');
                    store.commitChanges();  // 변경 상태 초기화
                },
                failure: function() {
                    Ext.Msg.alert('오류', '수정 실패');
                }
            });
        });
    },

    onButtonClick_add_button: function(button, e, eOpts) {
        const view = this.getView();
        const cet_grid = this.lookupReference('cet_grid');
        const cet_selected = cet_grid.getSelection();
        if (cet_selected.length === 0) {
            Ext.Msg.alert('알림', '출판사를 선택하세요.');
            return;
        }

        view.selectedCetCd = cet_selected[0].get('custCd');

        const cet_publish_grid = this.lookupReference('cet_publish_grid');
        const publish_grid = this.lookupReference('publish_grid');
        const cet_publish_store = cet_publish_grid.getStore();
        const plugin = cet_publish_grid.findPlugin('cellediting');

        const selected = publish_grid.getSelection();

        if (selected.length === 0) {
            Ext.Msg.alert('알림', '추가할 출판사를 선택하세요.');
            return;
        }

        selected.forEach((record) => {
            const alreadyExists = cet_publish_store.findRecord('chulpanCd', record.get('custCd'));
            if (!alreadyExists) {
                const newRec = cet_publish_store.add({
                    userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                    chk: '0',
                    chulpanCd: record.get('custCd'),
                    custAbbrNm: record.get('custAbbrNm'),
                    jiyukNm: record.get('jiyukNm'),
                    basicDangaRt: '',
                    singanQty: '',
                    centerPrtYn: true,
                    centerPrtGb: '3',
                    chulpanPrtGb: '2',
                    banpNotYn: false
                })[0];

                // 첫 행부터 편집 가능
                plugin.startEdit(newRec, 4); // 4번째 컬럼부터 편집 시작
            }
        });
    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('cet_publish_grid');
        const store = grid.getStore();
        const selection = grid.getSelection();

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '삭제할 행을 선택하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '선택한 항목을 삭제하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            // 서버 전송용 데이터 구성
            const payload = selection.map(r => ({
                userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                chulpanCd: r.get('chulpanCd'),
                cetCd: r.get('cetCd'),
                rowSeq: r.get('rowSeq')
            }));

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1003/delete',
                method: 'POST',
                jsonData: payload,
                success: function() {
                    Ext.Msg.alert('성공', '삭제되었습니다.');
                    store.remove(selection); // 로컬에서도 제거
                },
                failure: function() {
                    Ext.Msg.alert('오류', '삭제에 실패했습니다.');
                }
            });
        });
    },

    onPanelBeforeRender: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/173',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('173', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/168',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('168', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/111',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('111', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/288',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('288', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/243',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('243', codeList);
            }
        });
    }

});
