/*
 * File: app/view/system/MainFrameViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.system.MainFrameViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.system.mainframe',

    onMainFrameLoad: function(component, eOpts) {
        const tree = Ext.ComponentQuery.query('#menuTree')[0];
        const topTabPanel = Ext.ComponentQuery.query('#mainTopTabPanel')[0];

        tree.on('itemclick', function (view, record) {
            if (record.isLeaf()) {
                const menuId = record.getId();
                const menuNm = record.get('text');

                dream.util.Common.loadProgram(menuId, menuNm);

            }
        });

        Ext.Ajax.request({

            url: dream.util.Common.BASE_URL + '/system/menu/tree',
            method: 'POST',
            jsonData:{
                user_id : dream.util.Common.LOGIN_USER,
                user_cet_cd : dream.util.Common.LOGIN_USER_CET_CD
            },
            success:function(res) {
                const temp_menus = Ext.decode(res.responseText);
                const level1Menus = temp_menus[0].children;

                level1Menus.forEach(function (menu) {
                    topTabPanel.add({
                        title:menu.menuNm,
                        itemId:menu.menuId,
                        closable:false,
                        listeners:{
                            activate:function() {
                                const treeRoot = {
                                    expanded:true,
                                    children:(menu.children || []).map(function (level2) {
                                        return {
                                            text:level2.menuNm,
                                            id:level2.menuId,
                                            expanded:true,
                                            children:(level2.children || []).map(child=>({
                                                text:child.menuNm,
                                                id:child.menuId,
                                                leaf:true
                                            }))
                                        };
                                    })
                                };
                                tree.setRootNode(treeRoot);
                            }
                        }
                    });
                });

                if (level1Menus.length > 0) {
                    topTabPanel.setActiveTab(0);
                    topTabPanel.items.items[0].fireEvent('activate');
                }
            }


        });



    }

});
