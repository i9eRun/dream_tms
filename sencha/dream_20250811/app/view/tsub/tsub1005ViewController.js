/*
 * File: app/view/tsub/tsub1005ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsub.tsub1005ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsub.tsub1005',

    showCusPopup: function(targetField) {
        const me = this;

        if (!me.popupTpop1005 || me.popupTpop1005.destroyed) {
            me.popupTpop1005 = Ext.create('dream.view.tpop.tpop1005');

            me.popupTpop1005.on('selectUser', function(win, record) {
                const field = win.targetField;

                // 안전성 체크
                if (field && !field.destroyed && field.isFormField) {
                    field.setValue(record.get('cusCd'));
                }
            });
        }

        // ✅ 최신 필드를 재지정
        me.popupTpop1005.targetField = targetField;

        me.popupTpop1005.show();

    },

    onDatefieldAfterRender_CUS_DT: function(component, eOpts) {
        component.setValue(new Date());
    },

    onComboboxAfterRender_CUS_GB: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1001,true);
    },

    onComboboxAfterRender_CUS_AMPM_GB: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1003,true);
    },

    onTextfieldAfterRender_CUS_CD: function(component, eOpts) {
        const controller = this;

        component.getEl().on('mousedown', function() {
            controller.showCusPopup(component);
        });
    },

    onButtonClick_list_search_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const cus_dt = this.lookupReference('CUS_DT').getSubmitValue();
        const cus_gb = this.lookupReference('CUS_GB').getValue();
        const cus_cd = this.lookupReference('CUS_CD').getValue();
        const cus_ampm_gb = this.lookupReference('CUS_AMPM_GB').getValue();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            cusDt: cus_dt,
            cusGb: cus_gb,
            cusCd: cus_cd,
            cusAmpmGb: cus_ampm_gb
        });

        store.load();
    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsub/1005/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onGridpanelSelectionChange_list_grid: function(model, selected, eOpts) {
        if (!selected.length) return;

        const cus_cd = selected[0].get('cusCd');
        const cus_dt = this.lookupReference('CUS_DT').getSubmitValue();
        const item_grid = this.lookupReference('item_grid');
        const item_store = item_grid.getStore();

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsub/1005/item-list',
            method: 'GET',
            params: {
                userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                cusDt: cus_dt,
                cusCd: cus_cd
            },
            success: function(res) {
                const response = Ext.decode(res.responseText);

                if (response.success !== false && response.data) {
                    item_store.loadData(response.data); // 기존 데이터 제거 후 새로 세팅
                } else {
                    Ext.Msg.alert('오류', response.message || '데이터를 불러오지 못했습니다.');
                }
            },
            failure: function(res) {
                Ext.Msg.alert('서버 오류', '아이템 데이터를 가져오는 데 실패했습니다.');
            }
        });




    },

    onGridpanelAfterRender_item_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL + '/tsub/1005/item-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

    },

    onDatefieldAfterRender_CUS_DT2: function(component, eOpts) {
        component.setValue(new Date());
    },

    onComboboxAfterRender_CUS_GB2: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1001,true);
    },

    onComboboxAfterRender_CUS_AMPM_GB2: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1003,true);
    },

    onTextfieldAfterRender_CUS_CD2: function(component, eOpts) {
        const controller = this;

        component.getEl().on('mousedown', function() {
            controller.showCusPopup(component);
        });
    },

    onButtonClick_list2_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list2_grid');
        const store = grid.getStore();
        const cus_dt = this.lookupReference('CUS_DT2').getSubmitValue();
        const cus_gb = this.lookupReference('CUS_GB2').getValue();
        const cus_cd = this.lookupReference('CUS_CD2').getValue();
        const cus_ampm_gb = this.lookupReference('CUS_AMPM_GB2').getValue();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            cusDt: cus_dt,
            cusGb: cus_gb,
            cusCd: cus_cd,
            cusAmpmGb: cus_ampm_gb
        });

        store.load();
    },

    onGridpanelAfterRender_list2_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsub/1005/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onButtonClick_transfer_button: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');
        const list2_grid = this.lookupReference('list2_grid');
        const item_grid = this.lookupReference('item_grid');
        const item_store = item_grid.getStore();

        const selectedItemRecords = item_grid.getSelection();

        const oldRecord = list_grid.getSelection()[0];
        const newRecord = list2_grid.getSelection()[0];

        const oldDt = this.lookupReference('CUS_DT').getSubmitValue();
        const newDt = this.lookupReference('CUS_DT2').getSubmitValue();

        if (!oldRecord) {
            Ext.Msg.alert('오류', '이전 배본코스를 선택해주세요.');
            return;
        }

        if (!newRecord) {
            Ext.Msg.alert('오류', '이동할 배본코스를 선택해주세요.');
            return;
        }

        if (!oldDt || !newDt) {
            Ext.Msg.alert('오류', '이전 날짜와 새로운 날짜를 모두 입력해주세요.');
            return;
        }

        if (oldRecord.get('cusCd') === newRecord.get('cusCd') && oldDt === newDt) {
            Ext.Msg.alert('오류', '이전 코스와 날짜가 동일합니다. 다른 코스로 이동해주세요.');
            return;
        }

        if (selectedItemRecords.length === 0) {
            Ext.Msg.alert('오류', '이동할 아이템을 선택해주세요.');
            return;
        }

        // ✅ 값 가져오기
        const oldCusCd = oldRecord.get('cusCd');
        const newCusCd = newRecord.get('cusCd');

        // ✅ 전송 데이터 생성
        const payload = selectedItemRecords.map(record => ({
            oldCusCd: oldCusCd,
            newCusCd: newCusCd,
            sujumCd: record.get('SUJUM_CD'),
            oldDt: oldDt,
            newDt: newDt
        }));

        Ext.Msg.confirm('확인', `'${oldDt} ${oldCusCd}'의 데이터를 '${newDt} ${newCusCd}'로 이동하시겠습니까?`, function(choice) {
        if (choice === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsub/1005/transfer',
                method: 'POST',
                jsonData: payload,
                success: function(res) {

                    Ext.Ajax.request({
                        url: dream.util.Common.BASE_URL + '/tsub/1005/item-list',
                        method: 'GET',
                        params: {
                            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                            cusDt: oldDt,
                            cusCd: oldCusCd
                        },
                        success: function(res) {
                            const response = Ext.decode(res.responseText);

                            if (response.success !== false && response.data) {
                                item_store.loadData(response.data); // 기존 데이터 제거 후 새로 세팅
                            } else {
                                Ext.Msg.alert('오류', response.message || '데이터를 불러오지 못했습니다.');
                            }
                        },
                        failure: function(res) {
                            Ext.Msg.alert('서버 오류', '아이템 데이터를 가져오는 데 실패했습니다.');
                        }
                    });

                    Ext.Msg.alert('성공', '이동 처리 완료되었습니다.');
                },
                failure: function(res) {
                    Ext.Msg.alert('오류', '이동 처리 중 오류가 발생했습니다.');
                }
            });
        }
    });

    }

});
