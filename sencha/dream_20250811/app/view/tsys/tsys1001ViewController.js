/*
 * File: app/view/tsys/tsys1001ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsys.tsys1001ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsys.tsys1001',

    onTsys1001_user_searchAfterRender: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = Ext.getCmp('tsys_btn_user_search');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onCbo_user_chk_gb_schAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,257);
    },

    onCbo_use_yn_schAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","전체","");
    },

    onCbo_geunmoo_jo_schAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,151);
    },

    onTsys_btn_user_searchClick: function(button, e, eOpts) {
        const view = this.getView();
        const grid = view.lookupReference('tsys1001_user_grid');
        const store = grid.getStore();

        const search_keyword = Ext.getCmp('tsys1001_user_search').getValue();
        const user_chk_gb = Ext.getCmp('cbo_user_chk_gb_sch').getValue();
        const cbo_use_yn_sch = Ext.getCmp('cbo_use_yn_sch').getValue();
        const cbo_geunmoo_jo_sch = Ext.getCmp('cbo_geunmoo_jo_sch').getValue();



        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tsys/user',
            method: 'GET',
            params:{
                search_keyword : search_keyword,
                user_chk_gb : user_chk_gb,
                cbo_use_yn_sch : cbo_use_yn_sch,
                cbo_geunmoo_jo_sch : cbo_geunmoo_jo_sch

            },
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '사용자 목록을 불러오는 데 실패했습니다.');
            }
        });
    },

    onTsys1001UserGridAfterRender: function(component, eOpts) {
        const store = component.getStore();
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/user');

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tsys/user',
            method: 'GET',
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '사용자 목록을 불러오는 데 실패했습니다.');
            }
        });
    },

    onGridpanelSelectionChange_tsys1001_user_grid: function(model, selected, eOpts) {
        if (!selected || selected.length === 0) {
            console.warn('선택된 레코드가 없습니다.');
            return;
        }
        console.log(selected[0].data);
        const form = this.lookupReference('tsys1001_user_form');
        const userIdField = form.down('[name=userId]');
        let record = selected[0];

        if (record.get('enterDt') !== null) record.set('enterDt', new Date(record.get('enterDt')));
        if (record.get('retireDt') !== null) record.set('retireDt', new Date(record.get('retireDt')));
        if (record.get('jikchkDt') !== null) record.set('jikchkDt', new Date(record.get('jikchkDt')));
        if (record.get('pdaBanDt') !== null) record.set('pdaBanDt', new Date(record.get('pdaBanDt')));
        if (record.get('pdaBulDt') !== null) record.set('pdaBulDt', new Date(record.get('pdaBulDt')));
        if (record.get('sumUniformBanDt') !== null) record.set('sumUniformBanDt', new Date(record.get('sumUniformBanDt')));
        if (record.get('sumUniformBulDt') !== null) record.set('sumUniformBulDt', new Date(record.get('sumUniformBulDt')));
        if (record.get('winUniformBanDt') !== null) record.set('winUniformBanDt', new Date(record.get('winUniformBanDt')));
        if (record.get('winUniformBulDt') !== null) record.set('winUniformBulDt', new Date(record.get('winUniformBulDt')));

        if (form) {
            form.reset();
            form.loadRecord(selected[0]);  // 레코드를 폼에 로딩
            userIdField.setReadOnly(true);
        }
    },

    onJIKWEE_CDAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,240,false);
    },

    onJIKCHK_CDAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,241,false);
    },

    onUSE_YNAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","","1");
    },

    onUSER_AUTH_ADMAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,373,false);
    },

    onUSER_AUTH_RWAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"예아니요","","0");
    },

    onGEUNMOO_JOAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,151,false);
    },

    onFORM_USER_CHK_GBAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,257,false);

    },

    onJAEJIK_GBAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,242,false);

    },

    onTsys1001_new_userClick: function(button, e, eOpts) {
        const form = this.lookupReference('tsys1001_user_form');

        form.reset();

        const userIdField = form.down('[name=userId]');
        if (userIdField) {
            // 입력 가능하게 설정
            userIdField.setReadOnly(false);

            // 포커스 주기
            userIdField.focus(false, 100);

            // 빨간 테두리 적용 등 필요 시 추가
            // userIdField.setFieldStyle('border: 1px solid red;');
        }
    },

    onTsys1001_user_insertClick: function(button, e, eOpts) {
        const view = this.getView();
        const store = view.lookupReference('tsys1001_user_grid').getStore();
        const form = view.lookupReference('tsys1001_user_form');
        const values = form.getValues();
        values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/user/insert',
            method: 'POST',
            jsonData: values,
            success: function() {
                Ext.Msg.alert('성공', '등록 완료');
                store.reload();
            },
            failure: function(response) {
                let msg = '등록 실패';

                // 서버에서 JSON 형태로 메시지를 전달했다면 파싱
                try {
                    const respObj = Ext.decode(response.responseText);
                    if (respObj && respObj.message) {
                        msg += `\n\n사유: ${respObj.message}`;
                    }
                } catch (e) {
                    // 파싱 에러가 나면 무시하고 기본 메시지 사용
                }

                Ext.Msg.alert('오류', msg);
            }
        });
    },

    onTsys1001_popup_custClick: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tsys1001_user_form');
            form.down('[name=chulpanCd]').setValue(record.get('CUST_CD'));
            form.down('[name=chulpanNm]').setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onTsys1001_popup_deptClick: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1002');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tsys1001_user_form');
            form.down('[name=nDeptCd]').setValue(record.get('N_DEPT_CD'));
            form.down('[name=deptNm]').setValue(record.get('DEPT_NM'));
        });

        popup.show();
    },

    onTsys1001_user_updateClick: function(button, e, eOpts) {
        const view = this.getView();
        const store = view.lookupReference('tsys1001_user_grid').getStore();
        const form = view.lookupReference('tsys1001_user_form');

        if (!form.isValid()) {
            Ext.Msg.alert('오류', '필수 항목을 입력하세요.');
            return;
        }

        const values = form.getValues();
        values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD; // 필요한 경우 추가

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/user/update',
            method: 'PUT',
            jsonData: values,
            success: function(response) {
                Ext.Msg.alert('성공', '수정 완료');

                // 필요 시 그리드나 데이터 다시 불러오기
                const grid = Ext.ComponentQuery.query('grid[reference=tsys1001_user_grid]')[0];
                if (grid) {
                    grid.getStore().reload();
                }
            },
            failure: function(response) {
                let msg = '수정 실패';
                try {
                    const result = Ext.decode(response.responseText);
                    if (result && result.message) {
                        msg += `\n\n사유: ${result.message}`;
                    }
                } catch (e) { }
                    Ext.Msg.alert('오류', msg);
                }
            });





    },

    onTsys1001_user_deleteClick: function(button, e, eOpts) {
        const view = this.getView();
        const grid = view.lookupReference('tsys1001_user_grid');
        const selection = grid.getSelectionModel().getSelection();
        const form = view.lookupReference('tsys1001_user_form');

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '삭제할 항목을 선택하세요.');
            return;
        }

        const record = selection[0]; // 단일 선택 가정
        const userId = record.get('userId'); // PK 컬럼 이름에 따라 조정 필요

        console.log(userId);

        Ext.Msg.confirm('확인', `'${userId}' 사용자를 삭제하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/delete/'+userId,
                method: 'DELETE',
                success: function(response) {
                    Ext.Msg.alert('성공', '삭제되었습니다.');
                    form.reset();
                    grid.getStore().reload();

                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '삭제에 실패했습니다.');
                }
            });
        }
    });
    },

    onTsys1001PanelBeforeRender: function(component, eOpts) {

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/257',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('257', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/242',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('242', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/240',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('240', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/241',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('241', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/151',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('151', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/373',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('373', codeList);
            }
        });


    }

});
