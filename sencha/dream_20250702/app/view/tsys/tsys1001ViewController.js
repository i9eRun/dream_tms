/*
 * File: app/view/tsys/tsys1001ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsys.tsys1001ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsys.tsys1001',

    onCbo_user_chk_gb_schAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,257);
    },

    onCbo_use_yn_schAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","전체","");
    },

    onCbo_geunmoo_jo_schAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,151);
    },

    ontest123ButtonClick: function(button, e, eOpts) {
        const combo = Ext.ComponentQuery.query(`#USER_CHK_GB`)[0];
        combo.setValue(1);
    },

    onTsys_btn_user_searchClick: function(button, e, eOpts) {
        const view = this.getView();
        const grid = view.lookupReference('tsys1001_user_grid');
        const store = grid.getStore();

        const search_keyword = Ext.getCmp('tsys1001_user_search').getValue();
        const user_chk_gb = Ext.getCmp('cbo_user_chk_gb_sch').getValue();
        const cbo_use_yn_sch = Ext.getCmp('cbo_use_yn_sch').getValue();
        const cbo_geunmoo_jo_sch = Ext.getCmp('cbo_geunmoo_jo_sch').getValue();



        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tsys/user',
            method: 'GET',
            params:{
                search_keyword : search_keyword,
                user_chk_gb : user_chk_gb,
                cbo_use_yn_sch : cbo_use_yn_sch,
                cbo_geunmoo_jo_sch : cbo_geunmoo_jo_sch

            },
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '사용자 목록을 불러오는 데 실패했습니다.');
            }
        });
    },

    onTsys1001UserGridAfterRender: function(component, eOpts) {
        const store = component.getStore();

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tsys/user',
            method: 'GET',
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '사용자 목록을 불러오는 데 실패했습니다.');
            }
        });
    },

    onJIKWEE_CDAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,240,false);
    },

    onJIKCHK_CDAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,241,false);
    },

    onUSE_YNAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","","1");
    },

    onUSER_AUTH_ADMAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,373,false);
    },

    onUSER_AUTH_RWAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"예아니요","","0");
    },

    onGEUNMOO_JOAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,151,false);
    },

    onFORM_USER_CHK_GBAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,257,false);

    },

    onJAEJIK_GBAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,242,false);

    },

    onTsys1001PanelBeforeRender: function(component, eOpts) {

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/257',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('257', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/242',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('242', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/240',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('240', codeList);
            }
        });


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/241',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('241', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/151',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('151', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/373',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('373', codeList);
            }
        });


    }

});
