/*
 * File: app/view/tbas/tbas1008ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1008ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1008',

    onTbas1008_dept_use_ynAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","전체","");
    },

    onTbas1008searchClick: function(button, e, eOpts) {
        console.log('gsrgfsdfsefesfes');
        const grid = this.lookupReference('tbas1008_dept_grid');
        const store = grid.getStore();
        const use_yn = Ext.getCmp('tbas1008_dept_use_yn').getValue();
        const keyword = Ext.getCmp('tbas1008_dept_search_keyword').getValue();
        const params = {
            search_keyword : keyword,
            use_yn : use_yn
        };

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tbas/deptcodelist',
            method: 'GET',
            params : params,
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '데이터를 불러오는 데 실패했습니다.');
            }
        });
    },

    onTbas1008DeptGridAfterRender: function(component, eOpts) {
        const store = component.getStore();
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/deptcodelist');

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tbas/deptcodelist',
            method: 'GET',
            success: function(response) {
                const json = Ext.decode(response.responseText);
                store.setData(json);
            },
            failure: function(response) {
                Ext.Msg.alert('에러', '데이터를 불러오는 데 실패했습니다.');
            }
        });
    },

    onTbas1008DeptGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        const form = this.lookupReference('tbas1008_dept_form');
        if (form) {
            form.loadRecord(record);  // 레코드를 폼에 로딩
        }
    },

    onComboboxAfterRender_jiyuk_cd: function(component, eOpts) {
        dream.util.Common.setComboCode(component,148,false);
    },

    onComboboxAfterRender_use_yn: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","","1");
    },

    onComboboxAfterRender_team_gb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,249,false);
    },

    onComboboxAfterRender_mulryu_gb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,248,false);
    },

    onButtonClick_wbas1008_test: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1008_dept_form');
            form.down('[name=NEW_TEAM_HEAD_ID]').setValue(record.get('userId'));
            form.down('[name=NEW_TEAM_HEAD_NM]').setValue(record.get('userNm'));
        });

        popup.show();
    },

    onButtonClick_tbas1008_user_search2: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1008_dept_form');
            form.down('[name=JO_HEAD_ID]').setValue(record.get('userId'));
            form.down('[name=JO_HEAD_NM]').setValue(record.get('userNm'));
        });

        popup.show();
    },

    onButtonClick_tbas1008_user_search3: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1008_dept_form');
            form.down('[name=TOT_HEAD_ID]').setValue(record.get('userId'));
            form.down('[name=TOT_HEAD_NM]').setValue(record.get('userNm'));
        });

        popup.show();
    },

    onButtonClick_tbas1008_user_search4: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1008_dept_form');
            form.down('[name=MGR_HEAD_ID]').setValue(record.get('userId'));
            form.down('[name=MGR_HEAD_NM]').setValue(record.get('userNm'));
        });

        popup.show();
    },

    onInsert_deptClick_tbas1008: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1008_dept_form');

        form.reset();

        const deptCodeField = form.down('[name=N_DEPT_CD]');
        if (deptCodeField) {
            deptCodeField.focus(false, 100);

            // 빨간색 테두리 스타일 적용
            //deptCodeField.setFieldStyle('border: 1px solid red;');
        }



    },

    onTbas1008_dept_saveClick: function(button, e, eOpts) {
        const view = this.getView();

        const form = this.lookupReference('tbas1008_dept_form');
        const grid = view.lookupReference('tbas1008_dept_grid');

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        const values = form.getValues();
        values.USER_CET_CD = dream.util.Common.LOGIN_USER_CET_CD;

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL+'/tbas/dept/insert',
            method: 'POST',  // 또는 'PUT' (수정 시)
            jsonData: values,
            headers: {
                'Content-Type': 'application/json'  // ★ 필수
            },
            success: function(response) {
                Ext.Msg.alert('성공', '저장되었습니다.');

                if (grid) {
                    grid.getStore().reload();
                }
            },
            failure: function(response) {
                Ext.Msg.alert('오류', '저장에 실패했습니다.');
            }
        });
    },

    onTbas1008_deleteClick: function(button, e, eOpts) {
        const view = this.getView();
        const grid = view.lookupReference('tbas1008_dept_grid');
        const selection = grid.getSelectionModel().getSelection();
        const form = view.lookupReference('tbas1008_dept_form');

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '삭제할 항목을 선택하세요.');
            return;
        }

        const record = selection[0]; // 단일 선택 가정
        const nDeptCd = record.get('N_DEPT_CD'); // PK 컬럼 이름에 따라 조정 필요

        Ext.Msg.confirm('확인', `'${nDeptCd}' 부서를 삭제하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/dept/delete',
                method: 'POST',
                jsonData: { nDeptCd: nDeptCd }, // 서버가 필요로 하는 파라미터 이름으로 맞출 것
                headers: {
                    'Content-Type': 'application/json'
                },
                success: function(response) {
                    Ext.Msg.alert('성공', '삭제되었습니다.');
                    form.reset();
                    grid.getStore().reload();

                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '삭제에 실패했습니다.');
                }
            });
        }
    });
    },

    onTbas1008_updateClick: function(button, e, eOpts) {
        const view = this.getView();
        const grid = view.lookupReference('tbas1008_dept_grid');
        const form = this.lookupReference('tbas1008_dept_form');

        const selection = grid.getSelectionModel().getSelection();

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '수정할 항목을 선택하세요.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        const values = form.getValues();
        values.USER_CET_CD = dream.util.Common.LOGIN_USER_CET_CD;

        Ext.Msg.confirm('확인', '선택된 부서 정보를 수정하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/dept/update', // 서버에서 수정 처리 URL
                    method: 'POST',  // 또는 'PUT' 가능
                    jsonData: values,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    success: function(response) {
                        Ext.Msg.alert('성공', '수정되었습니다.');
                        grid.getStore().reload();
                    },
                    failure: function(response) {
                        Ext.Msg.alert('오류', '수정에 실패했습니다.');
                    }
                });
            }
        });
    },

    onPanelBeforeRender_tbas1008: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/148',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('148', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/248',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('248', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/249',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('249', codeList);
            }
        });
    }

});
