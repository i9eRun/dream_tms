/*
 * File: app/view/tsub/tsub1004ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsub.tsub1004ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsub.tsub1004',

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsub/1004/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onGridpanelCellClick_list_grid: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const column = grid.getHeaderContainer().getHeaderAtIndex(cellIndex);
        const columnText = column.text;
        const dataIndex = column.dataIndex; // 컬럼 데이터 인덱스
        const cusDt = this.lookupReference('CUS_DT').getSubmitValue();

        // 1. 값이 없거나 빈 문자열인지 확인
        if (!cusDt || typeof cusDt !== 'string' || cusDt.trim() === '') {
            return Ext.Msg.alert('오류', '날짜를 선택해주세요.');
        }

        // 2. 값이 YYYYMMDD 형식(예: 20250805)인지 정규표현식으로 확인
        const isValidFormat = /^\d{8}$/.test(cusDt);
        if (!isValidFormat) {
            return Ext.Msg.alert('오류', '날짜 형식이 올바르지 않습니다. (예: 20250805)');
        }


        // ① record에서 값 가져오기 (데이터 값)
        const cellValueFromRecord = record.get(dataIndex);

        // ② 실제 셀에 렌더링된 텍스트 가져오기 (예: renderer 처리된 것 포함)
        const cellTextFromDOM = td.innerText;


        if (columnText === '수정') {
            //console.log(record);
            //Ext.Msg.alert('수정', `수정 클릭: ${record.get('cusCd')}`);
            // 수정 로직

            Ext.Msg.confirm('확인', `코스:'${record.get('cusCd')}' 데이터를 저장하시겠습니까?`, function(btn) {
            if (btn === 'yes') {
                const payload = {
                    userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                    cusDt: cusDt,
                    cusCd: record.get('cusCd'),
                    userId: record.get('userId'),
                    carCd: record.get('carCd'),
                    insertId: dream.util.Common.LOGIN_USER,
                    updateId: dream.util.Common.LOGIN_USER
                };

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tsub/1004/save',
                    method: 'POST',
                    jsonData: payload,
                    success: function(response) {
                        Ext.Msg.alert('성공', '저장이 완료되었습니다.');
                        grid.getStore().reload();
                    },
                    failure: function(response) {
                        Ext.Msg.alert('오류', '저장 중 오류가 발생했습니다.');
                        console.error(response);
                    }

                });

            }
        });

    } else if (columnText === '삭제') {
        Ext.Msg.confirm('삭제 확인', '정말 삭제하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                // 1. 삭제에 필요한 값 추출
                const payload = {
                    userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                    cusDt: record.get('cusDt'),
                    cusCd: record.get('cusCd')
                };

                // 2. 서버에 DELETE 요청
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tsub/1004/delete',
                    method: 'DELETE',
                    jsonData: payload,
                    success: function(response) {
                        Ext.Msg.alert('성공', '삭제가 완료되었습니다.');
                        // 3. 그리드에서 삭제
                        const store = grid.getStore();
                        store.reload();
                    },
                    failure: function(response) {
                        Ext.Msg.alert('오류', '삭제 중 오류가 발생했습니다.');
                        console.error(response);
                    }
                });
            }
        });
    } else if (columnText === '차량번호') {
        const popup = Ext.create('dream.view.tpop.tpop1004');
        const me = this;

        popup.on('selectUser', function(win, selectedRecord) {
            const selectedCarCd = selectedRecord.get('carCd');
            const selectedCarRegnum = selectedRecord.get('carRegnum');
            record.set('carCd', selectedCarCd);
            record.set('carRegnum', selectedCarRegnum);
        });

        popup.show();

    } else if (columnText === '담당자명') {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, selectedRecord) {
            const selectedUserId = selectedRecord.get('userId');
            const selectedUserNm = selectedRecord.get('userNm');
            record.set('userId', selectedUserId);
            record.set('userNm', selectedUserNm);
        });

        popup.show();
    }
    },

    onDatefieldAfterRender_cus_dt: function(component, eOpts) {
        component.setValue(new Date());

        const button = this.lookupReference('search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onComboboxAfterRender_CUS_GB: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1001,true);
    },

    onComboboxAfterRender_CUS_AMPM_GB: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1003,true);
    },

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onButtonClick_search_button1: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const cus_dt = this.lookupReference('CUS_DT').getSubmitValue();
        const cus_gb = this.lookupReference('CUS_GB').getValue();
        const cus_ampm_gb = this.lookupReference('CUS_AMPM_GB').getValue();


        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsub/1004/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            cusDt: cus_dt,
            cusGb: cus_gb,
            cusAmpmGb: cus_ampm_gb
        });

        // 3. 스토어 로드
        store.load();
    }

});
