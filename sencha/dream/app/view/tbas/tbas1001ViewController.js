/*
 * File: app/view/tbas/tbas1001ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1001ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1001',

    onTbas1001_cust_div_gbAfterRender: function(component, eOpts) {
        dream.util.Common.setComboCode(component,168,true);

    },

    onTbas1001_use_ynAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","전체","1");
    },

    onTbas1001_trade_end_ynAfterRender: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"종료","전체","");
    },

    onTbas1001_cust_nmAfterRender: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = Ext.getCmp('tbas1001_cust_search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTbas1001_cust_search_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tbas1001_cust_grid]')[0];
        const store = grid.getStore();
        const custDivGb = Ext.getCmp('tbas1001_cust_div_gb').getValue();
        const tradeEndYn = Ext.getCmp('tbas1001_trade_end_yn').getValue();
        const custCd = Ext.getCmp('tbas1001_cust_cd').getValue();
        const custNm = Ext.getCmp('tbas1001_cust_nm').getValue();
        const useYn = Ext.getCmp('tbas1001_use_yn').getValue();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            custDivGb: custDivGb,
            tradeEndYn: tradeEndYn,
            custCd: custCd,
            custNm: custNm,
            useYn: useYn
        });

        store.reload();
    },

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('tbas1001_cust_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onGridpanelAfterRender_tbas1001_cust_grid: function(component, eOpts) {
        //const grid = Ext.ComponentQuery.query('grid[reference=tbas1001_cust_grid]')[0];
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1001/custlist');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            custDivGb: '1',
            useYn: '1'
        });

        // 3. 스토어 리로드
        // store.reload();
    },

    onGridpanelSelectionChange_tbas1001_cust_grid: function(model, selected, eOpts) {
        if (!selected.length) return;

        const form = this.lookupReference('tbas1001_cust_form');
        const custCdField = form.down('[name=custCd]');
        let record = selected[0];

        if (form) {
            form.reset();
            // 문자열을 Date 객체로 변환
            if (record.get('tradeFrDt')) {
                record.set('tradeFrDt', new Date(record.get('tradeFrDt')));
            }
            if (record.get('tradeToDt')) {
                record.set('tradeToDt', new Date(record.get('tradeToDt')));
            }
            form.loadRecord(record);
            custCdField.setReadOnly(true);
        }
    },

    onComboboxAfterRender_tbas1001_ordMethodGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,184,false);
    },

    onComboboxAfterRender_tbas1001_ordMethodGbD: function(component, eOpts) {
        dream.util.Common.setComboCode(component,185,false);
    },

    onComboboxAfterRender_tbas1001_chulgoGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,173,false);
    },

    onComboboxAfterRender_tbas1001_sosokNm: function(component, eOpts) {
        const store = Ext.create('Ext.data.Store', {
            fields: ['SOSOK_NM'],
            proxy: {
                type: 'ajax',
                url: dream.util.Common.BASE_URL + '/tpop/code/sosok',
                params : {
                    userCetCd: dream.util.Common.LOGIN_USER_CET_CD
                },
                reader: { type: 'json' }
            }
        });

        store.on('load', function(store, records) {
            if (records.length > 0) {
                //component.setValue(records[0].get('SOSOK_NM'));
                component.setValue('날개물류');
            }
            //component.getPicker().refresh();
        });

        component.setStore(store);

        store.load();
    },

    onComboboxAfterRender_tbas1001_mainSale: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"지정","","1");
    },

    onComboboxAfterRender_tbas1001_daepyoNmYn: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"있음","","1");
    },

    onComboboxAfterRender_tbas1001_custDivGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,168,false);
    },

    onComboboxAfterRender_tbas1001_useYn: function(component, eOpts) {
        dream.util.Common.setComboCode(component,183,true);
    },

    onComboboxAfterRender_tbas1001_magamDd: function(component, eOpts) {
        dream.util.Common.setComboCode(component,341,false);
    },

    onTbas1001_charge_emp_search_buttonClick: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1001_cust_form');

            form.down('[name=chargeEmpId]').setValue(record.get('userId'));
            form.down('[name=chargeEmpNm]').setValue(record.get('userNm'));
        });

        popup.show();
    },

    onButtonClick_tbas1001_cus_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1005');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1001_cust_form');

            form.down('[name=delivPathCd]').setValue(record.get('cusCd'));
            form.down('[name=delivCarNo]').setValue(record.get('cusNm'));
        });

        popup.show();
    },

    onButtonClick_tbas1001_cus_express_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1005');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1001_cust_form');

            form.down('[name=expressDelivCarNo]').setValue(record.get('cusNm'));
            form.down('[name=expressDelivPathCd]').setValue(record.get('cusCd'));
        });

        popup.show();
    },

    onButtonClick_tbas1001_addr_search_button: function(button, e, eOpts) {
        new daum.Postcode({
            oncomplete: function (data) {
                const form = Ext.ComponentQuery.query('form[reference=tbas1001_cust_form]')[0];
                if (!form) return;

                form.down('[name=postNo]').setValue(data.zonecode);          // 우편번호
                form.down('[name=addr1]').setValue(data.roadAddress);        // 도로명 주소
                const addr2 = form.down('[name=addr2]');
                if (addr2) addr2.focus();
            }
        }).open();
    },

    onButtonClick_tbas1001_cust_add_button: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1001_cust_form');

        if (form) {
            form.reset();
            const cust_cd_field = form.down('[name=custCd]');
            if (cust_cd_field) {
                cust_cd_field.setReadOnly(false);
                cust_cd_field.focus(true, 200);
            } else {
                console.warn('custCd 필드를 찾을 수 없습니다.');
            }
        }
    },

    onButtonClick_tbas1001_cust_insert_button: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1001_cust_form');

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '등록하시겠습니까?', function (choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.insertId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1001/custinsert',
                method: 'POST',
                jsonData: values,
                headers: {
                    'Content-Type': 'application/json'
                },
                success: function (response) {
                    Ext.Msg.alert('성공', '등록이 완료되었습니다.');

                    // 필요시 그리드나 리스트 새로고침
                    const grid = Ext.ComponentQuery.query('grid[reference=tbas1001_cust_grid]')[0];
                    if (grid) {
                        grid.getStore().reload();
                    }

                    form.reset();
                    const custCdField = form.down('[name=custCd]');
                    if (custCdField) custCdField.focus(true, 200);
                },
                failure: function (response) {
                    const msg = response.responseText || '등록에 실패했습니다.';
                    Ext.Msg.alert('오류', msg);
                }
            });
        });
    },

    onButtonClick_tbas1001_cust_update_button: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1001_cust_form');
        const grid = this.lookupReference('tbas1001_cust_grid');
        const selection = grid.getSelectionModel().getSelection();

        // 1. 로우 선택 여부 확인
        if (!selection || selection.length === 0) {
            Ext.Msg.alert('알림', '수정할 거래처를 먼저 선택하세요.');
            return;
        }

        // 2. 폼 유효성 검사
        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        // 3. 사용자 확인 후 수정 요청
        Ext.Msg.confirm('확인', '수정하시겠습니까?', function (choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.updateId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1001/custupdate',
                method: 'PUT',
                jsonData: values,
                headers: {
                    'Content-Type': 'application/json'
                },
                success: function (response) {
                    Ext.Msg.alert('성공', '수정이 완료되었습니다.');

                    // 4. 그리드 새로고침
                    if (grid) {
                        grid.getStore().reload();
                    }

                },
                failure: function (response) {
                    const msg = response.responseText || '수정에 실패했습니다.';
                    Ext.Msg.alert('오류', msg);
                }
            });
        });
    },

    onButtonClick_tbas1001_cust_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('tbas1001_cust_grid');
        const selection = grid.getSelectionModel().getSelection();

        if (!selection || selection.length === 0) {
            Ext.Msg.alert('알림', '삭제할 거래처를 먼저 선택하세요.');
            return;
        }

        const record = selection[0];
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        const custCd = record.get('custCd');

        Ext.Msg.confirm('확인', '정말 삭제하시겠습니까?', function (choice) {
            if (choice !== 'yes') return;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1001/custdelete',
                method: 'DELETE',
                params: {
                    userCetCd: userCetCd,
                    custCd: custCd
                },
                success: function (response) {
                    Ext.Msg.alert('성공', '삭제가 완료되었습니다.');
                    grid.getStore().reload();

                    // 폼 초기화도 같이
                    const form = btn.up('panel').lookupReference('tbas1001_cust_form');
                    if (form) form.reset();
                },
                failure: function (response) {
                    Ext.Msg.alert('오류', '삭제에 실패했습니다.');
                }
            });
        });
    },

    onPanelBeforeRender_tbas1001_panel: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/168',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('168', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/173',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('173', codeList);
            }
        });

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/184',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('184', codeList);
            }
        });

    }

});
