/*
 * File: app/view/tbas/tbas1010ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1010ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1010',

    onButtonClick_search_button: function(button, e, eOpts) {
        const type = this.lookupReference('type');
        const keyword = this.lookupReference('keyword');
        const store = this.lookupReference('list_grid').getStore();
        const grid1_store = this.lookupReference('chulpan_grid1').getStore();
        const grid2_store = this.lookupReference('chulpan_grid2').getStore();

        grid1_store.removeAll();
        grid2_store.removeAll();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            type: type.getValue(),
            keyword: keyword.getValue()
        });

        store.load();


    },

    onButtonClick_chulpan_search_button: function(button, e, eOpts) {
        // 기존 팝업이 있으면 먼저 제거
        let oldPopup = Ext.ComponentQuery.query('tpop1003')[0];
        if (oldPopup) {
            oldPopup.destroy();
        }

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;
        const chulpan_code = this.lookupReference('chulpan_code');
        const chulpan_name = this.lookupReference('chulpan_name');
        const grid = this.lookupReference('chulpan_grid');



        // 팝업 렌더링 후 검색어 전달
        popup.on('afterrender', function(win) {
            // 팝업 안의 검색어 입력 필드
            const searchField = win.down('#tpop1003_search_field');

            if (searchField) {
                searchField.setValue(keyword);

                // 필요하다면 검색 버튼 트리거나 store 로드 호출
                const searchBtn = win.lookupReference('search_button');
                if (searchBtn) {
                    searchBtn.fireEvent('click', searchBtn);
                }

            }


        });


        popup.on('selectUser', function(win, record) {
            chulpan_code.setValue(record.get('CUST_CD'));
            chulpan_name.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_chulpan_search_button2: function(button, e, eOpts) {
        // 기존 팝업이 있으면 먼저 제거
        let oldPopup = Ext.ComponentQuery.query('tpop1003')[0];
        if (oldPopup) {
            oldPopup.destroy();
        }

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;
        const chulpan_code = this.lookupReference('chulpan_code2');
        const chulpan_name = this.lookupReference('chulpan_name2');
        const grid = this.lookupReference('chulpan_grid2');

        this.lookupReference('chulpan_cond').reset();
        this.lookupReference('chulpan_basic_qty').reset();
        this.lookupReference('chulpan_basic_danga').reset();

        popup.on('selectUser', function(win, record) {
            chulpan_code.setValue(record.get('CUST_CD'));
            chulpan_name.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_chulpan_delete_button: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');
        const chulpan_grid1 = this.lookupReference('chulpan_grid1');

        if (list_grid.getSelection().length === 0) {
            Ext.Msg.alert('알림', '서점을 선택해주세요.');
            return;
        }

        if (chulpan_grid1.getSelection().length === 0) {
            Ext.Msg.alert('알림', '삭제할 출판사를 선택해주세요.');
            return;
        }

        const sujum_code = list_grid.getSelection()[0].get('sujumCd');
        const record = chulpan_grid1.getSelection()[0];
        const chulpan_code = record.get('chulpanCd');

        Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1010/chulpan-delete',
                    method: 'DELETE',
                    jsonData: {
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        sujumCd: sujum_code,
                        chulpanCd: chulpan_code
                    },
                    success: function(res) {
                        chulpan_grid1.getStore().reload();
                        Ext.Msg.alert('알림', '삭제가 완료되었습니다.');
                    },
                    failuer: function() {
                        Ext.Msg.alert('오류', '삭제 중 오류가 발생했습니다.');
                    }

                });

            }
        });






    },

    onButtonClick_chulpan_delete_button2: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');
        const chulpan_grid2 = this.lookupReference('chulpan_grid2');

        if (list_grid.getSelection().length === 0) {
            Ext.Msg.alert('알림', '서점을 선택해주세요.');
            return;
        }

        if (chulpan_grid2.getSelection().length === 0) {
            Ext.Msg.alert('알림', '삭제할 출판사를 선택해주세요.');
            return;
        }

        const sujum_code = list_grid.getSelection()[0].get('sujumCd');
        const record = chulpan_grid2.getSelection()[0];
        const chulpan_code = record.get('chulpanCd');

        Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1010/chulpan-delete2',
                    method: 'DELETE',
                    jsonData: {
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        sujumCd: sujum_code,
                        chulpanCd: chulpan_code
                    },
                    success: function(res) {
                        chulpan_grid2.getStore().reload();
                        Ext.Msg.alert('알림', '삭제가 완료되었습니다.');
                    },
                    failuer: function() {
                        Ext.Msg.alert('오류', '삭제 중 오류가 발생했습니다.');
                    }

                });

            }
        });
    },

    onButtonClick_chulpan_insert_button: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');
        const chulpan_grid1 = this.lookupReference('chulpan_grid1');

        if (list_grid.getSelection().length === 0) {
            Ext.Msg.alert('알림', '서점을 선택해주세요.');
            return;
        }

        const chulpan_code = this.lookupReference('chulpan_code').getValue();

        if (Ext.isEmpty(chulpan_code)) {
            Ext.Msg.alert('알림', '등록할 출판사를 검색해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '등록하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                const sujum_code = list_grid.getSelection()[0].get('sujumCd');

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1010/chulpan-insert',
                    method: 'POST',
                    jsonData: {
                        insertId: dream.util.Common.LOGIN_USER,
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        sujumCd: sujum_code,
                        chulpanCd: chulpan_code
                    },
                    success: function(res) {
                        chulpan_grid1.getStore().reload();
                        Ext.Msg.alert('알림', '등록이 완료되었습니다.');
                    },
                    failure: function() {
                        Ext.Msg.alert('오류', '등록 중 오류가 발생했습니다.');
                    }

                });
            }
        });

    },

    onButtonClick_sujum_save_button: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');

        if (list_grid.getSelection().length === 0) {
            Ext.Msg.alert('알림', '서점을 선택해주세요.');
            return;
        }

        const dochak_gb = this.lookupReference('dochak_gb');
        const sujum_cond = this.lookupReference('sujum_cond');
        const sujum_qty = this.lookupReference('sujum_qty');
        const sujum_price = this.lookupReference('sujum_price');
        const sujum_bigo = this.lookupReference('sujum_bigo');




        Ext.Msg.confirm('확인', '현재 내용을 저장하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                const sujum_code = list_grid.getSelection()[0].get('sujumCd');

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1010/save',
                    method: 'POST',
                    jsonData: {
                        updateId: dream.util.Common.LOGIN_USER,
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        sujumCd: sujum_code,
                        dochakGb: dochak_gb.getValue(),
                        dochakBasicGb: sujum_cond.getValue().dochakBasicGb,
                        dochakOverQty: sujum_qty.getValue(),
                        dochakBasicDanga: sujum_price.getValue(),
                        dochakBigo: sujum_bigo.getValue()

                    },
                    success: function(res) {
                        list_grid.getStore().reload();
                        Ext.Msg.alert('알림', '저장이 완료되었습니다.');
                    },
                    failure: function() {
                        Ext.Msg.alert('오류', '저장 중 오류가 발생했습니다.');
                    }

                });
            }
        });

    },

    onButtonClick_chulpan_insert_button2: function(button, e, eOpts) {
        const list_grid = this.lookupReference('list_grid');
        const chulpan_grid1 = this.lookupReference('chulpan_grid2');

        if (list_grid.getSelection().length === 0) {
            Ext.Msg.alert('알림', '서점을 선택해주세요.');
            return;
        }

        const chulpan_code = this.lookupReference('chulpan_code2').getValue();

        if (Ext.isEmpty(chulpan_code)) {
            Ext.Msg.alert('알림', '등록할 출판사를 검색해주세요.');
            return;
        }

        const chulpan_cond = this.lookupReference('chulpan_cond');

        if (Ext.isEmpty(chulpan_cond)) {
            Ext.Msg.alert('알림', '구분(부수/덩이)을 선택해주세요.');
            return;
        }

        const chulpan_basic_gb = chulpan_cond.getValue().chulpan_basic_gb;
        const chulpan_basic_qty = this.lookupReference('chulpan_basic_qty').getValue();
        const chulpan_basic_danga = this.lookupReference('chulpan_basic_danga').getValue();



        Ext.Msg.confirm('확인', '등록하시겠습니까?', function(btn) {
            if (btn === 'yes') {
                const sujum_code = list_grid.getSelection()[0].get('sujumCd');

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1010/chulpan-insert2',
                    method: 'POST',
                    jsonData: {
                        insertId: dream.util.Common.LOGIN_USER,
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                        sujumCd: sujum_code,
                        chulpanCd: chulpan_code,
                        chulpanBasicGb: chulpan_basic_gb,
                        chulpanBasicQty: chulpan_basic_qty,
                        chulpanBasicDanga: chulpan_basic_danga

                    },
                    success: function(res) {
                        chulpan_grid1.getStore().reload();
                        Ext.Msg.alert('알림', '등록이 완료되었습니다.');
                    },
                    failure: function() {
                        Ext.Msg.alert('오류', '등록 중 오류가 발생했습니다.');
                    }

                });
            }
        });

    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1010/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        // 3. 스토어 리로드
        store.reload();
    },

    onGridpanelSelectionChange_list_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;


        const name = this.lookupReference('sujum_name');
        const code = this.lookupReference('sujum_code');
        const jiyuk = this.lookupReference('sujum_jiyuk');
        const bigo = this.lookupReference('sujum_bigo');
        const cond = this.lookupReference('sujum_cond');
        const qty = this.lookupReference('sujum_qty');
        const price = this.lookupReference('sujum_price');
        const cond_val = selected[0].get('dochakBasicGb');
        const dochak_gb = this.lookupReference('dochak_gb');

        name.setValue(selected[0].get('custNm'));
        code.setValue(selected[0].get('sujumCd'));
        jiyuk.setValue(selected[0].get('jiyukNm'));
        bigo.setValue(selected[0].get('dochakBigo'));
        qty.setValue(selected[0].get('dochakOverQty'));
        price.setValue(selected[0].get('dochakBasicDanga'));
        dochak_gb.setValue(selected[0].get('dochakGb'));

        cond.setValue({ dochakBasicGb: cond_val });

        if (qty) {
            qty.setFieldLabel(cond_val === '0' ? '부수' : '덩이');
        }


        // chulpan_grid1 리스트 표기
        const grid1 = this.lookupReference('chulpan_grid1');
        const grid1_store = grid1.getStore();

        grid1_store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            chulpanGb: '1',
            sujumCd: selected[0].get('sujumCd')
        });

        grid1_store.load();


        // chulpan_grid2 리스트 표기
        const grid2 = this.lookupReference('chulpan_grid2');
        const grid2_store = grid2.getStore();

        grid2_store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            chulpanGb: '2',
            sujumCd: selected[0].get('sujumCd')
        });

        grid2_store.load();


    },

    onRadiogroupChange_sujum_cond: function(field, newValue, oldValue, eOpts) {
        const qtyField = this.lookupReference('sujum_qty');

        if (newValue.dochakBasicGb === '0') {
            qtyField.setFieldLabel('부수');
        } else if (newValue.dochakBasicGb === '1') {
            qtyField.setFieldLabel('덩이');
        }
    },

    onGridpanelAfterRender_chulpan_grid1: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1010/chulpan-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            chulpanGb: '1'
        });

        // 3. 스토어 리로드
        // store.reload();
    },

    onGridpanelAfterRender_chulpan_grid2: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1010/chulpan-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            chulpanGb: '2'
        });

        // 3. 스토어 리로드
        // store.reload();
    },

    onGridpanelSelectionChange_chulpan_grid2: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const record = selected[0];
        const chulpan_cond = this.lookupReference('chulpan_cond');
        const chulpan_basic_qty = this.lookupReference('chulpan_basic_qty');
        const chulpan_basic_danga = this.lookupReference('chulpan_basic_danga');
        const chulpan_code2 = this.lookupReference('chulpan_code2');
        const chulpan_name2 = this.lookupReference('chulpan_name2');
        const cond_val = record.get('chulpanBasicGb');

        chulpan_code2.setValue(record.get('chulpanCd'));
        chulpan_name2.setValue(record.get('chulpanNm'));
        chulpan_basic_qty.setValue(record.get('chulpanBasicQty'));
        chulpan_basic_danga.setValue(record.get('chulpanBasicDanga'));

        chulpan_cond.setValue({ chulpan_basic_gb: cond_val });

        if (chulpan_basic_qty) {
            chulpan_basic_qty.setFieldLabel(cond_val === '0' ? '부수' : '덩이');
        }







    },

    onRadiogroupChange_chulpan_cond: function(field, newValue, oldValue, eOpts) {
        const qtyField = this.lookupReference('chulpan_basic_qty');

        if (newValue.chulpan_basic_gb === '0') {
            qtyField.setFieldLabel('부수');
        } else if (newValue.chulpan_basic_gb === '1') {
            qtyField.setFieldLabel('덩이');
        }
    }

});
