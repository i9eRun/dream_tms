/*
 * File: app/view/tsys/tsys1002ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsys.tsys1002ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsys.tsys1002',

    onTreepanelAfterRender_tsys1002_tree_panel: function(component, eOpts) {

        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/getmenutree',
            method: 'GET',
            params: {
                userCetCd: dream.util.Common.LOGIN_USER_CET_CD
            },
            success: function(response) {
                const data = Ext.decode(response.responseText);
                const rootNode = component.getRootNode();
                rootNode.removeAll(true);
                rootNode.appendChild(data);
                rootNode.expand(true);
            },
            failure: function() {
                Ext.Msg.alert('오류', '메뉴 데이터를 불러오지 못했습니다.');
            }
        });


    },

    onTreepanelItemClick_tsys1002_tree_panel: function(dataview, record, item, index, e, eOpts) {
        const view = this.getView();
        const form = view.lookupReference('tsys1002_tree_form');

        if (form) {
            form.loadRecord(record);
        }
    },

    onComboboxAfterRender_tsys1002_combo_useyn: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","","");
    },

    onTsys1002_tree_insert_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tsys1002_tree_form');
        const values = form.getValues();
        values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        values.insertId = dream.util.Common.LOGIN_USER;

        if (!form.isValid()) {
            Ext.Msg.alert('오류', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '메뉴를 등록하시겠습니까?', function(choice) {
            if (choice === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tsys/menuadd',
                    method: 'POST',
                    jsonData: values,
                    success: function() {
                        Ext.Msg.alert('성공', '메뉴가 저장되었습니다.');
                        const tree = Ext.ComponentQuery.query('treepanel[reference=tsys1002_tree_panel]')[0];

                        Ext.Ajax.request({
                            url: dream.util.Common.BASE_URL + '/tsys/getmenutree',
                            method: 'GET',
                            params: {
                                userCetCd: dream.util.Common.LOGIN_USER_CET_CD
                            },
                            success: function(response) {
                                const data = Ext.decode(response.responseText);
                                const rootNode = tree.getRootNode();
                                rootNode.removeAll(true);
                                rootNode.appendChild(data);
                                rootNode.expand(true);
                            },
                            failure: function() {
                                Ext.Msg.alert('오류', '메뉴 데이터를 불러오지 못했습니다.');
                            }
                        });
                    },
                    failure: function(response) {
                        let msg = '저장 실패';

                        try {
                            const res = Ext.decode(response.responseText);
                            if (res.message) msg = res.message;
                        } catch (e) {
                            // responseText가 JSON이 아닐 수도 있음
                        }

                        Ext.Msg.alert('오류', msg);
                    }
                });
            }
        });
    },

    onTsys1002_menu_addClick: function(button, e, eOpts) {
        const tree = this.lookupReference('tsys1002_tree_panel');
        const form = this.lookupReference('tsys1002_tree_form');
        const selection = tree.getSelection()[0];

        if (!selection || selection.get('menuLevel') == 3) {
            Ext.Msg.alert('알림', '먼저 상위 메뉴를 선택하세요.');
            return;
        }

        // 신규 메뉴 ID 임시 설정 (예: NEW001 등)
        const newNode = {
            menuId: '',         // 저장 전까지는 공백
            menuNm: '',
            menuLevel: selection.get('menuLevel') + 1,
            parentMenuId: selection.get('menuId'),
            pgmYn: '1',
            useYn: '1',
            leaf: true,
            expanded: false,
            children: []
        };

        // 자식 노드로 추가
        //selection.appendChild(newNode);
        //selection.expand();

        // 트리에서 새 노드 선택
        //tree.getSelectionModel().select(newNode);

        // 폼 초기화 후 바인딩
        form.getForm().reset();
        form.loadRecord(Ext.create('Ext.data.Model', newNode));

        Ext.defer(function() {
            const menuIdField = form.down('[name=menuId]');
            if (menuIdField) {
                menuIdField.focus();
            }
        }, 100); // 약간의 지연을 줘야 안정적으로 포커스 됨


    },

    onTsys1002_tree_delete_buttonClick: function(button, e, eOpts) {
        const tree = this.lookupReference('tsys1002_tree_panel');
        const selection = tree.getSelection()[0];

        if (!selection) {
            Ext.Msg.alert('알림', '삭제할 메뉴를 선택하세요.');
            return;
        }

        const menuId = selection.get('menuId');

        Ext.Msg.confirm('확인', `'${menuId}' 메뉴를 삭제하시겠습니까?`, function(choice) {
        if (choice === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/menudelete',
                method: 'POST',
                jsonData: {
                    menuId: menuId,
                    userCetCd: dream.util.Common.LOGIN_USER_CET_CD
                },
                success: function(response) {
                    Ext.Msg.alert('성공', '메뉴가 삭제되었습니다.');

                    // 폼 초기화
                    const form = Ext.ComponentQuery.query('form[reference=tsys1002_tree_form]')[0];
                    if (form) form.getForm().reset();

                    // 트리 리로드
                    const tree = Ext.ComponentQuery.query('treepanel[reference=tsys1002_tree_panel]')[0];

                    Ext.Ajax.request({
                        url: dream.util.Common.BASE_URL + '/tsys/getmenutree',
                        method: 'GET',
                        params: {
                            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
                        },
                        success: function(response) {
                            const data = Ext.decode(response.responseText);
                            const rootNode = tree.getRootNode();
                            rootNode.removeAll(true);
                            rootNode.appendChild(data);
                            rootNode.expand(true);
                        },
                        failure: function() {
                            Ext.Msg.alert('오류', '메뉴 데이터를 불러오지 못했습니다.');
                        }
                    });

                },
                failure: function(response) {
                    const res = Ext.decode(response.responseText);
                    Ext.Msg.alert('삭제 실패', res.message || '서버 오류가 발생했습니다.');
                }
            });
        }
    });


    }

});
