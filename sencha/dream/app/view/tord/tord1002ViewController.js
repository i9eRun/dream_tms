/*
 * File: app/view/tord/tord1002ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tord.tord1002ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tord.tord1002',

    onGridpanelAfterRender_order_grid: function(component, eOpts) {
        const store = component.getStore();
        const today = Ext.Date.format(new Date(), 'Y-m-d');

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tord/1002/order-list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            frDt: today,
            toDt: today,
            ordDt: today
        });


    },

    onGridpanelSelectionChange_order_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const form = this.lookupReference('order_form');
        let record = selected[0];

        if (form) {
            form.reset();

            //     if (record.get('ordDt')) {
            //         const str = record.get('ordDt');
            //         const date = Ext.Date.parse(str, 'Ymd');
            //         record.set('ordDt', date);
            //     }

            form.loadRecord(record);
        }
    },

    onTextfieldAfterRender_chulpanNm: function(component, eOpts) {
        const button = this.lookupReference('form_chulpan_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldChange_chulpanNm: function(field, newValue, oldValue, eOpts) {
        const form = field.up('form');

        const s_chulpanNm = form.down('[name=chulpanNm]').getValue();

        if (Ext.isEmpty(s_chulpanNm)) {
            form.down('[name=chulpanCd]').setValue('');
        }

    },

    onTextfieldChange_sugeoNm: function(field, newValue, oldValue, eOpts) {
        const form = field.up('form');

        const s_sugeoNm = form.down('[name=sugeoNm]').getValue();

        if (Ext.isEmpty(s_sugeoNm)) {
            form.down('[name=sugeoId]').setValue('');
        }

    },

    onTextfieldAfterRender_sugeoNm: function(component, eOpts) {
        const button = this.lookupReference('form_com_user_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldAfterRender_sujumNm: function(component, eOpts) {
        const button = this.lookupReference('form_sujum_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) button.fireEvent('click', button);
            }
        });
    },

    onTextfieldChange_sujumNm: function(field, newValue, oldValue, eOpts) {
        const form = field.up('form');

        const s_sujumNm = form.down('[name=sujumNm]').getValue();

        if (Ext.isEmpty(s_sujumNm)) {
            form.down('[name=sujumCd]').setValue('');
        }

    },

    onTextfieldAfterRender_bigo_field: function(component, eOpts) {
        const grid = this.lookupReference('order_grid');
        const button = this.lookupReference('insert_button');

        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const selected = grid.getSelectionModel().getSelection();

                if (selected.length === 0) {
                    if (button) button.fireEvent('click', button);
                }
            }
        });
    },

    onComboboxAfterRender_chulgoGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,101,false);
    },

    onComboboxAfterRender_singanGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,106,false);
    },

    onComboboxAfterRender_michakGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1033,false);
    },

    onTextfieldAfterRender_ordQty: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === Ext.event.Event.ENTER) {
                const form = component.up('form');
                form.down('[name=ordBox]').focus(true, 100);
            }
        }

        );
    },

    onTextfieldAfterRender_ordAmt: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === Ext.event.Event.ENTER) {
                const form = component.up('form');
                form.down('[name=bigo]').focus(true, 100);
            }
        }

        );
    },

    onTextfieldAfterRender_ordBox: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === Ext.event.Event.ENTER) {
                const form = component.up('form');
                form.down('[name=ordAmt]').focus(true, 100);
            }
        }

        );
    },

    onDatefieldAfterRender_ordDt: function(component, eOpts) {
        const ordDt = Ext.Date.format(new Date(), 'Y-m-d');
        component.setValue(ordDt);

        const button = this.lookupReference('order_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onDatefieldAfterRender_labelPrtDt: function(component, eOpts) {
        const labelPrtDt = Ext.Date.format(new Date(), 'Y-m-d');
        component.setValue(labelPrtDt);

        const button = this.lookupReference('order_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_form_chulpan_search_button: function(button, e, eOpts) {
        // 기존 팝업이 있으면 먼저 제거
        let oldPopup = Ext.ComponentQuery.Query('tpop1003')[0];
        if (oldPopup) oldPopup.destroy();

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const form = this.lookupReference('order_form');
        const me = this;
        const keyword = form.down('[name=chulpanNm]').getValue();


        popup.on('afterrender', function(win) {
            if (!Ext.isEmpty(keyword)) {
                const searchField = win.down('#tpop1003_keyword');
                if (searchField) searchField.setValue(keyword);

                const btn = win.lookupReference('search_button');
                if (btn) btn.fireEvent('click',btn);
            }

        });

        popup.on('selectUser', function(win, record) {
            const publisher_code_field = form.down('[name=chulpanCd]');
            const publisher_name_field = form.down('[name=chulpanNm]');
            publisher_code_field.setValue(record.get('CUST_CD'));
            publisher_name_field.setValue(record.get('CUST_NM'));

            // 포커스는 팝업 닫힌 후에 지정
            Ext.defer(function() {
                const chulpanNmField = form.down('[name=sujumNm]');
                if (chulpanNmField) {
                    chulpanNmField.focus(false, 100);
                }
            }, 150); // 팝업 닫히는 타이밍 이후


        });

        popup.show();


    },

    onButtonClick_from_com_user_seanch_button: function(button, e, eOpts) {
        let oldPopup = Ext.ComponentQuery.Query('tpop1001')[0];
        if (oldPopup) oldPopup.destroy();

        const popup = Ext.create('dream.view.tpop.tpop1001');
        const form = this.lookupReference('order_form');
        const keyword = form.down('[name=sugeoNm]').getValue();

        popup.on('afterrender', function(win) {
            const searchField = win.down('#tpop1001_keyword');
            if (searchField) searchField.setValue(keyword);

            const btn = win.down('#tpop1001_search_btn');
            if (btn) btn.fireEvent('click', btn);
        });

        popup.on('selectUser', function(win, record) {
            const publisher_code_field = form.down('[name=sugeoId]');
            const publisher_name_field = form.down('[name=sugeoNm]');
            publisher_code_field.setValue(record.get('userId'));
            publisher_name_field.setValue(record.get('userNm'));

            // 포커스는 팝업 닫힌 후에 지정
            Ext.defer(function() {
                const chulpanNmField = form.down('[name=chulpanNm]');
                if (chulpanNmField) {
                    chulpanNmField.focus(false, 100);
                }
            }, 150); // 팝업 닫히는 타이밍 이후
        });

        popup.show();
    },

    onButtonClick_form_sujum_search_button: function(button, e, eOpts) {
        let oldPopup = Ext.ComponentQuery.Query('tpop1006')[0];
        if (oldPopup) oldPopup.destroy();


        const popup = Ext.create('dream.view.tpop.tpop1006');

        const form = this.lookupReference('order_form');
        const chulpan_cd_value = form.down('[name=chulpanCd]').getValue();
        const chulpan_name_value = form.down('[name=chulpanNm]').getValue();
        const sujum_name_value = form.down('[name=sujumNm]').getValue();

        if (!chulpan_cd_value) {
            Ext.Msg.alert('알림', '출판사를 먼저 선택해주세요.');
            return;
        }
        const send_cd = chulpan_cd_value;
        const send_nm = chulpan_name_value;




        popup.on('afterrender', function() {
            const searchField = popup.lookupReference('keyword');
            const popup_cd = popup.lookupReference('chulpan_code');
            const popup_nm = popup.lookupReference('chulpan_name');
            const btn = popup.lookupReference('search_button');

            // 출판사 코드/이름 설정
            if (popup_cd && popup_nm) {
                popup_cd.setValue(send_cd);
                popup_nm.setValue(send_nm);
            }

            // 검색어 설정 및 자동 검색 실행
            if (!Ext.isEmpty(sujum_name_value)) {
                if (searchField && btn) {
                    searchField.setValue(sujum_name_value);
                    btn.fireEvent('click', btn);
                }
            }
        });

        popup.on('selectUser', function(win, record) {
            const code_field = form.down('[name=sujumCd]');
            const name_field = form.down('[name=sujumNm]');
            const chulgo_field = form.down('[name=chulgoGb]');
            const baesongId_field = form.down('[name=baesongId]');
            const baesongNm_field = form.down('[name=baesongNm]');

            code_field.setValue(record.get('custCd'));
            name_field.setValue(record.get('custAbbrNm'));
            chulgo_field.setValue(record.get('chulgoGb'));
            baesongId_field.setValue(record.get('baesongId'));
            baesongNm_field.setValue(record.get('baesongNm'));
            // 포커스는 팝업 닫힌 후에 지정
            Ext.defer(function() {
                const chulpanNmField = form.down('[name=ordQty]');
                if (chulpanNmField) {
                    chulpanNmField.focus(false, 100);
                }
            }, 150); // 팝업 닫히는 타이밍 이후

        });

        popup.show();


    },

    onFormAfterRender_order_form: function(component, eOpts) {
        const fields = ['ordChkGb', 'itemGb', 'chulgoGb', 'guljaeGb', 'singanGb', 'bokQty', 'boxQty', 'ordAmt', 'bigo'];

        dream.util.Common.enableEnterKeyNavigation(component, fields);
    },

    onDatefieldAfterRender_start: function(component, eOpts) {
        const today = Ext.Date.format(new Date(), 'Y-m-d');
        component.setValue(today);

        const button = this.lookupReference('order_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onDatefieldAfterRender_end: function(component, eOpts) {
        const today = Ext.Date.format(new Date(), 'Y-m-d');
        component.setValue(today);

        const button = this.lookupReference('order_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldAfterRender_chulpanfNm: function(component, eOpts) {
        const button = this.lookupReference('chulpan_find_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });


    },

    onTextfieldChange_chulpanfNm: function(field, newValue, oldValue, eOpts) {

        const form = field.up('form');

        const s_chulpanfNm = form.down('[name=chulpan_find_Nm]').getValue();

        if (Ext.isEmpty(s_chulpanfNm)) {
            form.down('[name=chulpan_find_Cd]').setValue('');
        }
    },

    onButtonClick_chulpan_find_button: function(button, e, eOpts) {

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const chulpan_find_Cd_field = me.lookupReference('chulpan_find_Cd');
            const chulpan_find_Nm_field = me.lookupReference('chulpan_find_Nm');
            chulpan_find_Cd_field.setValue(record.get('CUST_CD'));
            chulpan_find_Nm_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('order_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onButtonClick_bookstore_search_button1: function(button, e, eOpts) {

        const popup = Ext.create('dream.view.tpop.tpop1003', {
            listeners: {
                show: function(win) {
                    const combo = win.down('#tpop1003_cust_gb');
                    const store = combo.getStore();

                    if (store.isLoaded()) {
                        combo.setValue('2');
                    } else {
                        store.load({
                            callback: function() {
                                combo.setValue('2');
                            }
                        });
                    }
                }
            }

        }).show();


        const me = this;

        popup.on('selectUser', function(win, record) {
            const sujum_find_Cd_field = me.lookupReference('sujum_find_Cd');
            const sujum_find_Nm_field = me.lookupReference('sujum_find_Nm');

            sujum_find_Cd_field.setValue(record.get('CUST_CD'));
            sujum_find_Nm_field.setValue(record.get('CUST_NM'));
        });

        popup.show();


    },

    onButtonClick_order_search_button: function(button, e, eOpts) {
        const view = this.getView();
        const frDt = view.lookupReference('frDt').getValue();
        const toDt = view.lookupReference('toDt').getValue();
        const publisher = view.lookupReference('chulpan_find_Cd').getValue();
        const bookstore = view.lookupReference('sujum_find_Cd').getValue();
        const orderGrid = view.lookupReference('order_grid');
        const store = orderGrid.getStore();

        // 날짜 포맷 설정 (yyyyMMdd 또는 yyyy-MM-dd 등 백엔드에 맞게)
        const frDateStr = Ext.Date.format(frDt, 'Ymd');
        const toDateStr = Ext.Date.format(toDt, 'Ymd');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            frDt: frDateStr,
            toDt: toDateStr,
            chulpanCd: publisher,
            sujumCd: bookstore
        });

        store.load();
    },

    onButtonClick_add_button: function(button, e, eOpts) {



        const form = this.lookupReference('order_form');

        // 선택된 행 모두 해제
        const grid = this.lookupReference('order_grid');
        const selectionModel = grid.getSelectionModel();
        selectionModel.deselectAll();



        if (form) {
            form.reset();
            let ordInputId = form.down('[name=ordInputId]');
            let ordChkGb = form.down('[name=ordChkGb]');
            let ordDt = form.down('[name=ordDt]');
            let ordRegiTime = form.down('[name=ordRegiTime]');

            //     const now = new Date();
            //     const timeOnly = Ext.Date.format(now, 'H:i:s');

            //     const timeField = form.down('[name=ordRegiTime]');
            //     if (timeField) {
            //         // 문자열 → Date 변환 (날짜는 의미 없고 시간만 사용)
            //         const parsedTime = Ext.Date.parse(timeOnly, 'H:i:s');
            //         timeField.setValue(parsedTime);
            //     }

            const date_field = form.down('[name=ordDt]');

            date_field.setValue(new Date());

            const date_field_labelPrtDt = form.down('[name=labelPrtDt]');

            date_field_labelPrtDt.setValue(new Date());


            const s_ordInputId = form.down('[name=ordInputId]').getValue();

            if (Ext.isEmpty(s_ordInputId)) {
                form.down('[name=ordInputId]').setValue('1234');
            }


            const now = new Date();
            ordRegiTime.setValue(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0));

            const comboDefaults = ['itemGb', 'chulgoGb', 'guljaeGb', 'singanGb', 'michakGb'];
            comboDefaults.forEach(name => {
                const field = form.down('[name=' + name + ']');
                if (field) {
                    field.setValue('01'); // 기본 코드 값 "01"로 설정
                }
                const sugeoNmField = form.down('[name=sugeoNm]');
                if (sugeoNmField) {
                    sugeoNmField.focus(true, 200); // 200ms 지연 후 포커스
                }


            }



            );

            ordChkGb.setValue('02');
            ordInputId.setValue(dream.util.Common.LOGIN_USER);


        }
    },

    onButtonClick_insert_button: function(button, e, eOpts) {
        const form = this.lookupReference('order_form');
        const store = this.lookupReference('order_grid').getStore();

        const order_no = form.down('[name=ordNo]').getValue();

        if (order_no) {
            Ext.Msg.alert('알림', '추가버튼 클릭후 등록하세요.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '주문을 등록하시겠습니까?', function (btn) {
            if (btn !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.insertId = dream.util.Common.LOGIN_USER;

            // 날짜 필드 포맷: 'Ymd' 형태로 변환
            //     const dateFields = ['ordDt'];
            //     dateFields.forEach(key => {
            //         const field = form.down('[name=' + key + ']');
            //         if (field) {
            //             const val = field.getValue();
            //             if (val instanceof Date) {
            //                 values[key] = Ext.Date.format(val, 'Ymd'); // 예: 20250721
            //             }
            //         }
            //     });

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tord/1002/insert',
                method: 'POST',
                jsonData: values,
                success: function (response) {
                    Ext.Msg.alert('성공', '주문이 등록되었습니다.');
                    form.reset();
                    store.reload();

                },
                failure: function (response) {
                    Ext.Msg.alert('오류', '등록 실패: ' + response.statusText);
                }
            });

        });





    },

    onButtonClick_update_button: function(button, e, eOpts) {
        const form = this.lookupReference('order_form');
        const store = this.lookupReference('order_grid').getStore();

        const ordNo = form.down('[name=ordNo]').getValue();

        if (!ordNo) {
            Ext.Msg.alert('알림', '수정할 주문을 먼저 선택하세요.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '주문 정보를 수정하시겠습니까?', function (btn) {
            if (btn !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.updateId = dream.util.Common.LOGIN_USER;
            //values.updateDt = Ext.Date.format(new Date(), 'Y-m-d H:i:s');

            // 날짜 포맷 변환
            const convertDate = (name, format) => {
                const field = form.down('[name=' + name + ']');
                if (field && field.getValue()) {
                    values[name] = Ext.Date.format(field.getValue(), format);
                }
            };

            //convertDate('ordDt', 'Ymd');           // 주문일자
            //convertDate('labelPrtDt', 'Y-m-d');    // 라벨일자
            //convertDate('ordRegiTime', 'H:i:s');   // 등록시간

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tord/1002/update',
                method: 'PUT',
                jsonData: values,
                success: function (response) {
                    Ext.Msg.alert('성공', '주문이 수정되었습니다.');
                    form.reset();
                    store.reload();
                },
                failure: function (response) {
                    Ext.Msg.alert('오류', '수정 실패: ' + response.statusText);
                }
            });
        });
    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('order_grid');
        const selection = grid.getSelectionModel().getSelection();

        if (selection.length === 0) {
            Ext.Msg.alert('알림', '삭제할 주문을 선택하세요.');
            return;
        }

        const record = selection[0];
        const ordNo = record.get('ordNo');
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

        Ext.Msg.confirm('확인', '선택한 주문을 삭제하시겠습니까?', function(btn) {
            if (btn !== 'yes') return;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tord/1002/delete',
                method: 'DELETE',
                params: {
                    userCetCd: userCetCd,
                    ordNo: ordNo
                },
                success: function(response) {
                    Ext.Msg.alert('성공', '주문이 삭제되었습니다.');
                    grid.getStore().reload();
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '삭제 실패: ' + response.responseText);
                }
            });
        });
    },

    onPanelBeforeRender: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/101',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('101', codeList);
            }
        });
    }

});
