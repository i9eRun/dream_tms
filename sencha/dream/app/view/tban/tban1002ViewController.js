/*
 * File: app/view/tban/tban1002ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tban.tban1002ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tban.tban1002',

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tban/1002/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onGridpanelSelectionChange_list_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const form = this.lookupReference('detail_form');
        if (!form) return;

        const record = selected[0];
        const banpIbgoDt = record.get('banpIbgoDt');

        form.reset();
        form.loadRecord(record);

        if (banpIbgoDt) {
            const formDateField = form.down('[name=banpIbgoDt]');
            if (formDateField) {
                formDateField.setValue(dream.util.Common.parseYmdToDate(banpIbgoDt));
            }
        }
    },

    onGridpanelViewReady_list_grid: function(tablepanel, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.applyNumberColumnFormat(grid, [
        'banpQty',
        'banpBox'
        ]);
    },

    onComboboxAfterRender_subulGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,247,false);
    },

    onComboboxAfterRender_subulTypeGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,218,false);
    },

    onComboboxAfterRender_banpGuljaeGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,124,false);
    },

    onTextfieldAfterRender_sujumNm: function(component, eOpts) {
        const button = this.lookupReference('form_sujum_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldAfterRender_chulpanNm: function(component, eOpts) {
        const button = this.lookupReference('form_chulpan_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) button.fireEvent('click', button);
            }
        });
    },

    onButtonClick_form_sujum_button: function(button, e, eOpts) {
        // 기존 팝업이 있으면 먼저 제거
        let oldPopup = Ext.ComponentQuery.Query('tpop1003')[0];
        if (oldPopup) {
            oldPopup.destroy();
        }

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;
        const form = this.lookupReference('detail_form');
        const keyword = form.down('[name=sujumNm]').getValue();


        // 팝업 내부 컴포넌트 기본값 설정 (콤보박스)
        popup.on('afterrender', function(win) {
            const combo = win.down('#tpop1003_cust_gb');
            if (combo) {
                combo.defaultValue = "2";  // 부모에서 원하는 기본값
            }

            if (!Ext.isEmpty(keyword)) {
                const searchField = win.down('#tpop1003_keyword');

                if (searchField) {
                    searchField.setValue(keyword);
                }

                const btn = win.lookupReference('search_button');
                if (btn) {
                    btn.fireEvent('click', btn);
                }


            }
        });


        popup.on('selectUser', function(win, record) {
            const code_field = form.down('[name=sujumCd]');
            const name_field = form.down('[name=sujumNm]');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));

        });

        popup.show();


        form.down('[name=chulpanNm]').focus(true, 100);



    },

    onButtonClick_form_chulpan_button: function(button, e, eOpts) {
        // 기존 팝업이 있으면 먼저 제거
        let op = Ext.ComponentQuery.Query('tpop1003')[0];
        if (op) op.destroy();

        const popup = Ext.create('dream.view.tpop.tpop1003');

        const me = this;
        const form = this.lookupReference('detail_form');
        const keyword = form.down('[name=chulpanNm]').getValue();

        popup.on('afterrender', function(win) {
            if (!Ext.isEmpty(keyword)) {
                const searchField = win.down('#tpop1003_keyword');
                if (searchField) searchField.setValue(keyword);
                const btn = win.lookupReference('search_button');
                if (btn) btn.fireEvent('click', btn);
            }
        });


        popup.on('selectUser', function(win, record) {

            const code_field = form.down('[name=chulpanCd]');
            const name_field = form.down('[name=chulpanNm]');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();

        form.down('[name=subulGb]').focus(true, 100);
    },

    onFormAfterRender_detail_form: function(component, eOpts) {
        // 폼 필드에 엔터키 입력시 필드 이동순서
        const fields = [
        "subulGb",
        "subulTypeGb",
        "banpGuljaeGb",
        "banpQty",
        "banpBox",
        "bigo"
        ];

        dream.util.Common.enableEnterKeyNavigation(component, fields);

    },

    onDatefieldAfterRender_start: function(component, eOpts) {
        const view = this.getView();
        component.setValue(new Date());
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = view.lookupReference('search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onDatefieldAfterRender_end: function(component, eOpts) {
        const view = this.getView();
        component.setValue(new Date());
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = view.lookupReference('search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_chulpan_search_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const code_field = me.lookupReference('chulpan_code');
            const name_field = me.lookupReference('chulpan_name');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const start_date = this.lookupReference('start_date').getSubmitValue();
        const end_date = this.lookupReference('end_date').getSubmitValue();
        const chulpan_code = this.lookupReference('chulpan_code').getValue();
        const sujum_code = this.lookupReference('sujum_code').getValue();
        const store = this.lookupReference('list_grid').getStore();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            startDate: start_date,
            endDate: end_date,
            chulpanCd: chulpan_code,
            sujumCd: sujum_code
        });

        store.load();
    },

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onButtonClick_sujum_search_button1: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003', {
            listeners: {
                show: function(win) {
                    const combo = win.down('#tpop1003_cust_gb');
                    const store = combo.getStore();

                    if (store.isLoaded()) {
                        combo.setValue('2');
                    } else {
                        store.load({
                            callback: function() {
                                combo.setValue('2');
                            }
                        });
                    }
                }
            }

        }).show();


        const me = this;

        popup.on('selectUser', function(win, record) {
            const code_field = me.lookupReference('sujum_code');
            const name_field = me.lookupReference('sujum_name');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const selected = grid.getSelection();

        if (!selected || selected.length === 0) {
            Ext.Msg.alert('알림', '삭제할 데이터를 선택해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const banpIbgoNo = selected[0].get('banpIbgoNo');
            const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tban/1002/delete',
                method: 'DELETE',
                jsonData: {
                    banpIbgoNo: banpIbgoNo,
                    userCetCd: userCetCd
                },
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '삭제되었습니다.');
                        grid.getStore().load();
                    } else {
                        Ext.Msg.alert('실패', res.message || '삭제 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_update_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const store = this.lookupReference('list_grid').getStore();

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '수정하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.updateId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tban/1002/update',
                method: 'PUT',
                jsonData: values,
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '수정되었습니다.');
                        store.load();
                    } else {
                        Ext.Msg.alert('실패', res.message || '수정 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_insert_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const store = this.lookupReference('list_grid').getStore();


        const banpIbgoNoField = form.down('[name=banpIbgoNo]');
        if (banpIbgoNoField.getValue()) {
            Ext.Msg.alert('알림', '이미 등록된 사고입니다.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '등록하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.insertId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tban/1002/insert',
                method: 'POST',
                jsonData: values,
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '등록되었습니다.');
                        const today = Ext.Date.format(new Date(), 'Ymd');

                        store.getProxy().setExtraParams({
                            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                            startDate: today,
                            endDate: today
                        });

                        store.load();
                        form.reset();
                    } else {
                        Ext.Msg.alert('실패', res.message || '등록 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_add_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const grid = this.lookupReference('list_grid');
        const selModel = grid.getSelectionModel();
        selModel.deselectAll();
        form.reset();

        const date_field = form.down('[name=banpIbgoDt]');
        //date_field.setReadOnly(true);
        date_field.setValue(new Date());
        form.down('[name=insertId]').setValue(dream.util.Common.LOGIN_USER);
        form.down('[name=sujumNm]').focus(true,200);
    },

    onPanelBeforeRender: function(component, eOpts) {
        dream.util.Common.loadCode('247');
        dream.util.Common.loadCode('218');
        dream.util.Common.loadCode('124');

    }

});
