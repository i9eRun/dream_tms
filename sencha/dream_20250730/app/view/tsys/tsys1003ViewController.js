/*
 * File: app/view/tsys/tsys1003ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsys.tsys1003ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsys.tsys1003',

    onGridpanelAfterRender_tsys1003_group_grid: function(component, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1003_group_grid]')[0];
        const store = grid.getStore();

        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/group/grouplist');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        store.reload();
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        if (!selected.length) return;

        // if (!selected || selected.length === 0) {
        //     console.warn('선택된 레코드가 없습니다.');
        //     return;
        // }

        const view = this.getView();
        const form = view.lookupReference('tsys1003_group_form');
        const code_cd_field = form.down('[name=groupCd]');

        if (form) {
            form.loadRecord(selected[0]);
            code_cd_field.setReadOnly(true);
        }



        // 메뉴트리에 선택된 그룹의 메뉴만 표시하기

        const groupCd = selected[0].get('groupCd'); // D03 등
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        const tree = view.lookupReference('tsys1003_tree');

        // 전체 체크 초기화
        tree.getRootNode().cascadeBy(function(node) {
            node.set('checked', false);
        });

        // 서버에서 체크된 메뉴 ID 불러오기
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/group/' + groupCd,
            method: 'GET',
            params: {
                userCetCd: userCetCd,
                groupCd: groupCd
            },
            success: function(res) {
                const checkedMenuIds = Ext.decode(res.responseText); // ['TBAS1001', 'OINA2002', ...]
                const store = tree.getStore();

                store.getRoot().cascadeBy(function(node) {
                    //console.log('NODE:', node.get('menuId'), '✔', checkedMenuIds.includes(node.get('menuId')));
                    if (checkedMenuIds.includes(node.get('menuId'))) {
                        node.set('checked', true);
                    }
                });
            },
            failure: function() {
                Ext.Msg.alert('오류', '메뉴 권한 정보를 불러오는 데 실패했습니다.');
            }
        });



        // 메뉴그룹에 속한 그룹유저 가져오기

        const group_user_grid = Ext.ComponentQuery.query('grid[reference=tsys1003_group_user_grid]')[0];
        const group_user_store = group_user_grid.getStore();

        group_user_store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            groupCd: groupCd
        });

        group_user_store.reload();



    },

    onTsys1003_group_pre_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tsys1003_group_form');
        if (form) {
            form.reset();
            const formField = form.down('[name=groupCd]');
            const useynField = form.down('[name=useYn]');
            if (formField) {
                formField.setReadOnly(false);
                formField.focus(false, 100);
            }
            if (useynField) {
                useynField.setValue('1');
            }
        }


    },

    onTsys1003_group_add_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tsys1003_group_form');
        const groupGrid = this.lookupReference('tsys1003_group_grid');

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        const values = form.getValues();
        values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        values.insertId = dream.util.Common.LOGIN_USER;

        Ext.Msg.confirm('확인', `그룹 [${values.groupNm}]을 추가하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/group/insertgroup',
                method: 'POST',
                jsonData: values,
                success: function(res) {
                    Ext.Msg.alert('성공', '그룹이 추가되었습니다.');

                    groupGrid.getStore().reload(); // 그룹 목록 새로고침
                },
                failure: function(res) {
                    Ext.Msg.alert('실패', '그룹 추가 실패');
                }
            });
        }
    });




    },

    onTsys1003_group_update_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tsys1003_group_form');
        const groupGrid = this.lookupReference('tsys1003_group_grid');
        const selectedGroup = groupGrid.getSelectionModel().getSelection()[0];

        if (!selectedGroup) {
            Ext.Msg.alert('알림', '삭제할 그룹을 선택해주세요.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        const values = form.getValues();
        values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        values.updateId = dream.util.Common.LOGIN_USER;

        Ext.Msg.confirm('확인', `그룹 [${values.groupCd}]을 수정하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/group/updategroup',
                method: 'PUT',
                jsonData: values,
                success: function(res) {
                    Ext.Msg.alert('성공', '그룹이 수정되었습니다.');

                    groupGrid.getStore().reload(); // 그룹 목록 새로고침
                },
                failure: function(res) {
                    Ext.Msg.alert('실패', '그룹 수정 실패');
                }
            });
        }
    });





    },

    onTsys1003_search_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1003_group_grid]')[0];
        const store = grid.getStore();
        const keyword = Ext.getCmp('tsys1003_search_keyword').getValue();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            keyword: keyword
        });
        store.reload();
    },

    onTsys1003_group_user_add_buttonClick: function(button, e, eOpts) {



        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const userId = record.get('userId');
            const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            const groupGrid = me.lookupReference('tsys1003_group_grid');
            const selectedGroup = groupGrid.getSelectionModel().getSelection()[0];

            if (!selectedGroup) {
                Ext.Msg.alert('알림', '그룹을 먼저 선택하세요.');
                return;
            }

            const groupCd = selectedGroup.get('groupCd');

            // 사용자 추가 확인 메시지
            Ext.Msg.confirm('확인', `사용자 [${userId}]를 그룹에 추가하겠습니까?`, function (btn) {
            if (btn === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tsys/group/insertuser',
                    method: 'POST',
                    jsonData: {
                        userId: userId,
                        groupCd: groupCd,
                        userCetCd: userCetCd,
                        insertId: dream.util.Common.LOGIN_USER
                    },
                    success: function (res) {
                        Ext.Msg.alert('성공', '사용자 추가 완료');
                        // 필요 시 사용자 그리드 새로고침
                        const userGrid = Ext.ComponentQuery.query('[reference=tsys1003_group_user_grid]')[0];
                        if (userGrid) {
                            const store = userGrid.getStore();
                            store.getProxy().setExtraParam('groupCd', groupCd);
                            store.getProxy().setExtraParam('userCetCd', userCetCd);
                            store.load();
                        }
                    },
                    failure: function (res) {
                        Ext.Msg.alert('실패', '사용자 추가 실패');
                    }
                });

                popup.close();
            }
        });







    });

    popup.show();
    },

    onTsys1003_menu_update_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1003_group_grid]')[0];
        const selected = grid.getSelectionModel().getSelection();
        if (!selected.length) return;
        const record = selected[0]; // 첫 번째 선택 항목
        const groupCd = record.get('groupCd');

        const tree = this.lookupReference('tsys1003_tree');
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        const userId = dream.util.Common.LOGIN_USER;
        const checkedMenuIds = [];

        // 체크된 메뉴 노드 순회하여 저장
        tree.getRootNode().cascadeBy(function(node) {
            if (node.get('checked')) {
                checkedMenuIds.push(node.get('menuId'));
            }
        });

        console.log(checkedMenuIds);

        // 2. 저장 요청
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/tsys/group/insert/' + groupCd,
            method: 'POST',
            params: {
                userCetCd: userCetCd,
                userId: userId,
                groupCd: groupCd
            },
            jsonData: checkedMenuIds, // ← ['WBAS1001', 'WBAS2002', ...]
            success: function(response) {
                Ext.Msg.alert('성공', '메뉴 권한이 저장되었습니다.');
            },
            failure: function(response) {
                Ext.Msg.alert('오류', '저장에 실패했습니다.');
            }
        });






    },

    onTsys1003_group_delete_buttonClick: function(button, e, eOpts) {
        const groupGrid = this.lookupReference('tsys1003_group_grid');
        const selectedGroup = groupGrid.getSelectionModel().getSelection()[0];
        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

        if (!selectedGroup) {
            Ext.Msg.alert('알림', '삭제할 그룹을 선택해주세요.');
            return;
        }

        const groupCd = selectedGroup.get('groupCd');

        Ext.Msg.confirm('확인', `[${groupCd}]를 삭제하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/group/deletegroup',
                method: 'DELETE',
                jsonData: {
                    userCetCd: userCetCd,
                    groupCd: groupCd

                },
                success: function(response) {
                    Ext.Msg.alert('성공', '삭제 완료');
                    groupGrid.getStore().reload(); // 사용자 목록 새로고침
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '삭제 실패');
                }
            });
        }
    });
    },

    onTsys1003_group_user_delete_buttonClick: function(button, e, eOpts) {
        const userGrid = this.lookupReference('tsys1003_group_user_grid');
        const selectedUser = userGrid.getSelectionModel().getSelection()[0];

        const groupGrid = this.lookupReference('tsys1003_group_grid');
        const selectedGroup = groupGrid.getSelectionModel().getSelection()[0];

        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

        if (!selectedGroup || !selectedUser) {
            Ext.Msg.alert('알림', '그룹과 사용자를 모두 선택해주세요.');
            return;
        }

        const groupCd = selectedGroup.get('groupCd');
        const userId = selectedUser.get('USER_ID');

        Ext.Msg.confirm('확인', `사용자 [${userId}]를 그룹에서 삭제하시겠습니까?`, function(btn) {
        if (btn === 'yes') {
            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tsys/group/deleteuser',
                method: 'DELETE',
                jsonData: {
                    userCetCd: userCetCd,
                    groupCd: groupCd,
                    userId: userId
                },
                success: function(response) {
                    Ext.Msg.alert('성공', '삭제 완료');
                    userGrid.getStore().reload(); // 사용자 목록 새로고침
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '삭제 실패');
                }
            });
        }
    });










    },

    onGridpanelAfterRender_tsys1003_groupusergrid: function(component, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tsys1003_group_user_grid]')[0];
        const store = grid.getStore();

        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsys/group/groupuserlist');

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onComboboxAfterRender_tsys1003_cbo_useyn: function(component, eOpts) {
        dream.util.Common.setFlagCombo(component,"사용","","");
    },

    onTsys1003_search_keywordAfterRender: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = Ext.getCmp('tsys1003_search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTreepanelAfterRender_tsys1003_tree: function(component, eOpts) {
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/system/menu/all',
            method: 'GET',
            success: function(response) {
                const data = Ext.decode(response.responseText);
                const rootNode = component.getRootNode();
                rootNode.removeAll(true);
                rootNode.appendChild(data); // 각 노드에 checked: true/false 포함되어야 함
                rootNode.expand(true);
            },
            failure: function() {
                Ext.Msg.alert('오류', '메뉴 데이터를 불러오지 못했습니다.');
            }
        });
    }

});
