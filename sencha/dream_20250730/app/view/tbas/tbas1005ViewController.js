/*
 * File: app/view/tbas/tbas1005ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1005ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1005',

    onGridpanelAfterRender_tbas1005_cus_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/courselist');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

        // 3. 스토어 리로드
        store.reload();

    },

    onGridpanelSelectionChange_tbas1005_cus_grid: function(model, selected, eOpts) {
        if (!selected.length) return;

        const form = this.lookupReference('tbas1005_cus_form');
        const cusCdField = form.down('[name=cusCd]');
        let record = selected[0];

        if (form) {
            form.reset();
            form.loadRecord(record);
            cusCdField.setReadOnly(true);
        }
    },

    onTbas1005_keywordAfterRender: function(component, eOpts) {
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = Ext.getCmp('tbas1005_search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTbas1005_search_buttonClick: function(button, e, eOpts) {
        const grid = Ext.ComponentQuery.query('grid[reference=tbas1005_cus_grid]')[0];
        const store = grid.getStore();
        const keyword = Ext.getCmp('tbas1005_keyword').getValue();
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            keyword: keyword
        });
        store.reload();

    },

    onTbas1005_delete_buttonClick: function(button, e, eOpts) {
        const grid = this.lookupReference('tbas1005_cus_grid');
        const selection = grid.getSelectionModel().getSelection()[0];

        if (!selection) {
            Ext.Msg.alert('알림', '삭제할 코스를 선택하세요.');
            return;
        }

        const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
        const cusCd = selection.get('cusCd');

        Ext.Msg.confirm('확인', '정말로 삭제하시겠습니까?', function(choice) {
            if (choice === 'yes') {
                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1005/coursedelete',
                    method: 'DELETE',
                    params: {
                        userCetCd: userCetCd,
                        cusCd: cusCd
                    },
                    success: function(response) {
                        Ext.Msg.alert('성공', '삭제가 완료되었습니다.');
                        grid.getStore().reload();
                    },
                    failure: function(response) {
                        let msg = '삭제 중 오류가 발생했습니다.';
                        try {
                            const json = Ext.decode(response.responseText);
                            if (typeof json === 'string') msg = json;
                            else if (json.message) msg = json.message;
                        } catch (e) {}
                            Ext.Msg.alert('오류', msg);
                        }
                    });
                }
            });





    },

    onTbas1005_add_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1005_cus_form');


        if (form) {
            form.reset();
            const cusCdField = form.down('[name=cusCd]');

            if (cusCdField) {
                cusCdField.setReadOnly(false);
                cusCdField.focus(200);
            }
        }




    },

    onTbas1005_save_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1005_cus_form');

        if (!form) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '등록하시겠습니까?', function(choice) {
            if (choice === 'yes') {
                const values = form.getValues();
                values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
                values.insertId = dream.util.Common.LOGIN_USER;

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1005/courseinsert',
                    method: 'POST',
                    jsonData: values,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    success: function(response) {
                        Ext.Msg.alert('성공', '등록이 완료되었습니다.');

                        // 그리드 새로고침
                        const grid = Ext.ComponentQuery.query('grid[reference=tbas1005_cus_grid]')[0];
                        if (grid) grid.getStore().reload();

                        // 폼 초기화
                        form.reset();
                    },
                    failure: function(response) {
                        let msg = '등록 중 오류가 발생했습니다.';
                        try {
                            // 백엔드에서 보낸 메시지 추출
                            const json = Ext.decode(response.responseText);
                            if (typeof json === 'string') {
                                msg = json;
                            } else if (json.message) {
                                msg = json.message;
                            }
                        } catch (e) {
                            // JSON 파싱 실패 시 기본 메시지 유지
                        }
                        Ext.Msg.alert('오류', msg);

                    }
                });
            }
        });






    },

    onTbas1005_update_buttonClick: function(button, e, eOpts) {
        const form = this.lookupReference('tbas1005_cus_form');

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력하세요.');
            return;
        }

        Ext.Msg.confirm('확인', '수정하시겠습니까?', function(choice) {
            if (choice === 'yes') {
                const values = form.getValues();
                values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
                values.updateId = dream.util.Common.LOGIN_USER;

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1005/courseupdate',
                    method: 'PUT',
                    jsonData: values,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    success: function(response) {
                        Ext.Msg.alert('성공', '수정이 완료되었습니다.');

                        const grid = Ext.ComponentQuery.query('grid[reference=tbas1005_cus_grid]')[0];
                        if (grid) grid.getStore().reload();
                    },
                    failure: function(response) {
                        let msg = '수정 중 오류가 발생했습니다.';
                        try {
                            const json = Ext.decode(response.responseText);
                            if (typeof json === 'string') msg = json;
                            else if (json.message) msg = json.message;
                        } catch (e) {}
                            Ext.Msg.alert('오류', msg);
                        }
                    });
                }
            });





    },

    onComboboxAfterRender_tbas1005_cusGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1001,false);
    },

    onComboboxAfterRender_tbas1005_cusUse: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1002,false);
    },

    onComboboxAfterRender_tbas1005_cusAmpmGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1003,false);
    },

    onComboboxAfterRender_tbas1005_cusBonsa: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1004,false);
    },

    onComboboxAfterRender_tbas1005_cusTmsGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1005,false);
    },

    onTbas1005_car_search_buttonClick: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1004');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1005_cus_form');
            form.down('[name=carCd]').setValue(record.get('carCd'));
            form.down('[name=carNm]').setValue(record.get('carNm'));
        });

        popup.show();

    },

    onTbas1005_user_search_buttonClick: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1001');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('tbas1005_cus_form');
            form.down('[name=userId]').setValue(record.get('userId'));
            form.down('[name=userNm]').setValue(record.get('userNm'));
        });

        popup.show();

    },

    onPanelBeforeRender_tbas1005_panel: function(component, eOpts) {
        // 삭제버튼 숨김처리
        const deleteBtn = component.down('#tbas1005_delete_button');
        if (deleteBtn) {
            deleteBtn.hide();
        }


        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1001',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1001', codeList);
            }
        });
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1002',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1002', codeList);
            }
        });
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1003',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1003', codeList);
            }
        });
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1004',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1004', codeList);
            }
        });
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/api/code/1005',
            method: 'GET',
            success: function(response) {
                const codeList = Ext.decode(response.responseText);
                dream.util.Common.setCodeData('1005', codeList);
            }
        });

    }

});
