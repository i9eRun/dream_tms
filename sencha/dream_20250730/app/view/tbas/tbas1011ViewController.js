/*
 * File: app/view/tbas/tbas1011ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1011ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1011',

    onTextfieldAfterRender: function(component, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const view = this.getView(); // View 접근

        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const editedValue = parseInt(component.getValue());

                if (isNaN(editedValue)) {
                    Ext.Msg.alert('오류', '숫자만 입력 가능합니다.');
                    return;
                }

                const selectionModel = grid.getSelectionModel();
                const record = selectionModel.getSelection()[0];

                if (!record) {
                    Ext.Msg.alert('오류', '편집 대상 레코드를 찾을 수 없습니다.');
                    return;
                }

                const cusCd = record.get('cusCd');
                const oldValue = view.originalSunbun;

                // 변경 없으면 무시
                if (oldValue === editedValue) return;

                // oldSubSunbun 백업
                record.set('oldSubSunbun', oldValue);

                // 3. 순번 충돌 방지 처리
                store.each(function(rec) {
                    if (rec === record || rec.get('cusCd') !== cusCd) return;

                    const sunbun = parseInt(rec.get('subSunbun'));

                    if (editedValue < oldValue) {
                        // 앞으로 당김: 중간 순번들 +1
                        if (sunbun >= editedValue && sunbun < oldValue) {
                            rec.set('subSunbun', sunbun + 1);
                            rec.set('oldSubSunbun', sunbun);
                        }
                    } else {
                        // 뒤로 밀림: 중간 순번들 -1
                        if (sunbun <= editedValue && sunbun > oldValue) {
                            rec.set('subSunbun', sunbun - 1);
                            rec.set('oldSubSunbun', sunbun);
                        }
                    }
                });

                // 4. 자기 자신 순번 설정
                record.set('subSunbun', editedValue);

                // 5. 정렬 및 선택 유지
                store.sort([{ property: 'subSunbun', direction: 'ASC' }]);

                Ext.defer(function() {
                    const idx = store.indexOf(record);
                    if (idx !== -1) {
                        grid.getSelectionModel().select(idx);
                    }
                }, 100);
            }
        }, this);








    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1011/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });

    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        const column = tableview.getHeaderAtIndex(cellIndex);
        const columnDataIndex = column.dataIndex;

        if (columnDataIndex === 'subSunbun') {
            const originalValue = parseInt(record.get('subSunbun'));
            this.getView().originalSunbun = originalValue;
            console.log('originalSunbun 저장됨:', originalValue);
        }
    },

    onTextfieldAfterRender_search_cusCd: function(component, eOpts) {
        const button = this.lookupReference('search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onTextfieldAfterRender_search_cusCd1: function(component, eOpts) {
        const button = this.lookupReference('sunbun_search_button');
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1005');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const sch_cusCd = me.lookupReference('search_cusCd');

            sch_cusCd.setValue(record.get('cusCd'));

        });

        popup.show();
    },

    onButtonClick_reset_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();

        store.rejectChanges();
        store.removeAll();
    },

    onButtonClick_load_button: function(button, e, eOpts) {
        const search_cusCd = this.lookupReference('search_cusCd').getValue();
        const store = this.lookupReference('list_grid').getStore();

        if (!search_cusCd) {
            Ext.Msg.alert('알림', '코스를 선택해주세요!');
            return;
        }

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            cusCd: search_cusCd
        });

        store.load({
            callback: function (records) {
                records.forEach(record => {
                    record.set('oldSubSunbun', record.get('subSunbun'));
                });
            }
        });
    },

    onButtonClick_add_button: function(button, e, eOpts) {

        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const selection = grid.getSelection()[0];

        if (!selection) {
            Ext.Msg.alert('오류', '행을 먼저 선택해주세요.');
            return;
        }

        const baseIndex = Number(selection.get('subSunbun')); // 기준 순번
        const cusCd = selection.get('cusCd'); // 동일 그룹

        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;

        // ✅ 팝업에서 거래처 선택 시 이후 로직 실행
        popup.on('selectUser', function(win, record) {
            console.log(record);
            const selectedCustCd = record.get('CUST_CD');
            const selectedCustGb = record.get('CUST_GB');
            const selectedCustNm = record.get('CUST_NM');
            const selectedjiyukNm = record.get('JIYUK_NM');

            if (!selectedCustCd) {
                Ext.Msg.alert('오류', '거래처 코드가 없습니다.');
                return;
            }

            // 👉 순번 밀기
            store.each(r => {
                if (r.get('cusCd') === cusCd && Number(r.get('subSunbun')) >= baseIndex) {
                    // 기존 순번을 백업 (한 번만 저장)
                    //             if (!r.get('oldSubSunbun')) {
                    //                 r.set('oldSubSunbun', r.get('subSunbun'));
                    //             }
                    r.set('subSunbun', Number(r.get('subSunbun')) + 1);
                }
            });

            // 👉 새 레코드 생성
            const newRecord = store.model.create({
                userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
                cusCd: cusCd,
                subSunbun: baseIndex,
                custCd: selectedCustCd,
                custGb: selectedCustGb,
                custNm: selectedCustNm,
                jiyukNm: selectedjiyukNm,
                subWorkGb: '1',
                subOrderGb: '01',
                subChulGb: '',
                insertId: dream.util.Common.LOGIN_USER,
                updateId: dream.util.Common.LOGIN_USER
            });

            // 👉 추가 및 정렬
            store.add(newRecord);
            store.sort('subSunbun', 'ASC');

            // 👉 선택 유지
            Ext.defer(() => {
                const matched = store.findRecord('subSunbun', baseIndex, 0, false, true);
                if (matched) {
                    grid.getSelectionModel().select(matched);
                }
            }, 50);
        });

        popup.show();

    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const selection = grid.getSelectionModel().getSelection()[0];

        if (!selection) {
            Ext.Msg.alert('오류', '삭제할 행을 선택하세요.');
            return;
        }

        // 기준 값 추출
        const deletedSunbun = Number(selection.get('subSunbun'));
        const deletedCusCd = selection.get('cusCd');

        // 1. 삭제 대상 로우 제거
        store.remove(selection);

        // 2. 삭제된 순번 이후 항목들의 순번을 -1로 조정
        store.each(record => {
            const currentSunbun = Number(record.get('subSunbun'));
            if (record.get('cusCd') === deletedCusCd && currentSunbun > deletedSunbun) {
                record.set('subSunbun', currentSunbun - 1);
            }
        });

        // 3. 정렬
        store.sort('subSunbun', 'ASC');

        // 4. 다음 항목 자동 선택
        Ext.defer(() => {
            const nextRecord = store.findRecord('subSunbun', deletedSunbun, 0, false, true);
            if (nextRecord) {
                grid.getSelectionModel().select(nextRecord);
            } else if (store.getCount() > 0) {
                // 다음 항목이 없다면 마지막 항목 선택
                grid.getSelectionModel().select(store.getCount() - 1);
            }
        }, 50);
    },

    onButtonClick_save_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();

        // 신규 데이터
        const newRecords = store.getNewRecords().map(r => {
            const data = r.getData();
            return data;
        });

        // 수정된 데이터: oldSubSunbun 고려
        const updatedRecords = store.getUpdatedRecords().map(r => {
            const data = r.getData();
            // oldSubSunbun이 없으면 원래 subSunbun을 복사해줌
            //     if (!data.oldSubSunbun) {
            //         data.oldSubSunbun = data.subSunbun;
            //     }
            return data;
        });

        // 삭제된 데이터
        const removedRecords = store.getRemovedRecords().map(r => r.getData());

        const payload = {
            insertList: newRecords,
            updateList: updatedRecords,
            deleteList: removedRecords
        };

        Ext.Msg.confirm('확인', '저장하시겠습니까?', function(btn) {
            if (btn !== 'yes') return;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/tbas/1011/save',
                method: 'POST',
                jsonData: payload,
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('알림', '저장 완료되었습니다.');
                        store.reload();
                    } else {
                        Ext.Msg.alert('실패', res.message || '저장 중 오류가 발생했습니다.');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 통신 오류 또는 저장 실패');
                }
            });
        });
    },

    onButtonClick_sunbun_search_button: function(button, e, eOpts) {
        let searchMatches = [];
        let searchIndex = 0;


        const grid = this.lookupReference('list_grid');
        const store = grid.getStore();
        const keyword = this.lookupReference('search_cusNm').getValue();

        if (!keyword) {
            Ext.Msg.alert('알림', '검색할 키워드를 입력하세요.');
            return;
        }

        // 첫 검색이거나 키워드가 변경되었을 때 일치 항목을 다시 찾음
        if (!this.lastKeyword || this.lastKeyword !== keyword) {
            this.searchMatches = [];

            store.each((record, index) => {
                const name = record.get('custNm') || '';
                if (name.includes(keyword)) {
                    this.searchMatches.push(index);
                }
            });

            this.searchIndex = 0;
            this.lastKeyword = keyword;
        }

        if (this.searchMatches.length === 0) {
            Ext.Msg.alert('결과 없음', `'${keyword}'이(가) 포함된 거래처를 찾을 수 없습니다.`);
            return;
        }

        // 현재 인덱스에 해당하는 레코드 선택 및 포커스
        const matchedIndex = this.searchMatches[this.searchIndex];
        const record = store.getAt(matchedIndex);

        const rowIndex = matchedIndex;
        const columnIndex = grid.getColumnManager().getHeaderIndex('subSunbun');

        grid.getSelectionModel().select(record); // 행 선택

        grid.getView().focusCell({
            row: rowIndex,
            column: columnIndex
        });

        // 다음 검색 위치로 이동 (순환)
        this.searchIndex = (this.searchIndex + 1) % this.searchMatches.length;
    },

    onPanelBeforeRender: function(component, eOpts) {
        dream.util.Common.loadCode('168');
        dream.util.Common.loadCode('1003');
        dream.util.Common.loadCode('1022');

    }

});
