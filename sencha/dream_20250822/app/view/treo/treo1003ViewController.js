/*
 * File: app/view/treo/treo1003ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.treo.treo1003ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.treo.treo1003',

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/treo/1003/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        });


    },

    onGridpanelSelectionChange_list_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const form = this.lookupReference('detail_form');

        if (form) {
            form.reset();
            form.loadRecord(selected[0]);
        }
    },

    onGridpanelViewReady_list_grid: function(tablepanel, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.applyNumberColumnFormat(grid, [
        'ordQty',
        'ordBox'
        ]);
    },

    onDatefieldAfterRender_end_date: function(component, eOpts) {
        const view = this.getView();
        component.setValue(new Date());
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = view.lookupReference('search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onButtonClick_sujum_search_button1: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003', {
            listeners: {
                show: function(win) {
                    const combo = win.down('#tpop1003_cust_gb');
                    const store = combo.getStore();

                    if (store.isLoaded()) {
                        combo.setValue('2');
                    } else {
                        store.load({
                            callback: function() {
                                combo.setValue('2');
                            }
                        });
                    }
                }
            }

        }).show();


        const me = this;

        popup.on('selectUser', function(win, record) {
            const code_field = me.lookupReference('sujum_code');
            const name_field = me.lookupReference('sujum_name');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const start_date = this.lookupReference('start_date').getSubmitValue();
        const end_date = this.lookupReference('end_date').getSubmitValue();
        const chulpan_code = this.lookupReference('chulpan_code').getValue();
        const sujum_code = this.lookupReference('sujum_code').getValue();
        const store = this.lookupReference('list_grid').getStore();

        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            startDate: start_date,
            endDate: end_date,
            chulpanCd: chulpan_code,
            sujumCd: sujum_code
        });

        store.load();
    },

    onButtonClick_chulpan_search_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const code_field = me.lookupReference('chulpan_code');
            const name_field = me.lookupReference('chulpan_name');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const grid = this.lookupReference('list_grid');
        const selected = grid.getSelection();

        if (!selected || selected.length === 0) {
            Ext.Msg.alert('알림', '삭제할 데이터를 선택해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const ordRetnNo = selected[0].get('ordRetnNo');
            const userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/treo/1003/delete',
                method: 'DELETE',
                jsonData: {
                    ordRetnNo: ordRetnNo,
                    userCetCd: userCetCd
                },
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '삭제되었습니다.');
                        grid.getStore().load();
                    } else {
                        Ext.Msg.alert('실패', res.message || '삭제 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_update_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const store = this.lookupReference('list_grid').getStore();

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '수정하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.updateId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/treo/1003/update',
                method: 'PUT',
                jsonData: values,
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '수정되었습니다.');
                        store.load();
                    } else {
                        Ext.Msg.alert('실패', res.message || '수정 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_insert_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const store = this.lookupReference('list_grid').getStore();

        const ordRetnNoField = form.down('[name=ordRetnNo]');
        if (ordRetnNoField.getValue()) {
            Ext.Msg.alert('알림', '이미 등록된 사고입니다.');
            return;
        }

        if (!form.isValid()) {
            Ext.Msg.alert('알림', '필수 항목을 입력해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '등록하시겠습니까?', function(choice) {
            if (choice !== 'yes') return;

            const values = form.getValues();
            values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;
            values.insertId = dream.util.Common.LOGIN_USER;

            Ext.Ajax.request({
                url: dream.util.Common.BASE_URL + '/treo/1003/insert',
                method: 'POST',
                jsonData: values,
                success: function(response) {
                    const res = Ext.decode(response.responseText);
                    if (res.success) {
                        Ext.Msg.alert('성공', '등록되었습니다.');
                        store.load();
                        form.reset();
                    } else {
                        Ext.Msg.alert('실패', res.message || '등록 실패');
                    }
                },
                failure: function(response) {
                    Ext.Msg.alert('오류', '서버 오류 발생');
                }
            });
        });
    },

    onButtonClick_add_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const grid = this.lookupReference('list_grid');
        const selModel = grid.getSelectionModel();
        selModel.deselectAll();
        form.reset();

        const date_field = form.down('[name=ordRetnDt]');
        date_field.setReadOnly(true);
        date_field.setValue(new Date());
        form.down('[name=insertId]').setValue(dream.util.Common.LOGIN_USER);
        form.down('[name=chulpanNm]').focus(true,200);

    },

    onComboboxAfterRender_transGb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,107,false);
    },

    onComboboxAfterRender_delivCd: function(component, eOpts) {
        dream.util.Common.setComboCode(component,111,false);
    },

    onButtonClick_form_chulpan_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1003');
        const me = this;


        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('detail_form');

            const code_field = form.down('[name=chulpanCd]');
            const name_field = form.down('[name=chulpanNm]');

            code_field.setValue(record.get('CUST_CD'));
            name_field.setValue(record.get('CUST_NM'));
        });

        popup.show();
    },

    onButtonClick_form_sujum_button: function(button, e, eOpts) {
        const form = this.lookupReference('detail_form');
        const chulpan_cd_value = form.down('[name=chulpanCd]').getValue();
        const chulpan_name_value = form.down('[name=chulpanNm]').getValue();

        if (!chulpan_cd_value) {
            Ext.Msg.alert('알림', '출판사를 먼저 선택해주세요.');
            return;
        }

        const send_cd = chulpan_cd_value;
        const send_nm = chulpan_name_value;


        const popup = Ext.create('dream.view.tpop.tpop1006');
        const me = this;

        // 👉 팝업 내부 검색어 필드에 값 세팅 (예: '관악사')
        popup.on('afterrender', function() {
            const searchField = popup.lookupReference('keyword');
            const popup_cd = popup.lookupReference('chulpan_code');
            const popup_nm = popup.lookupReference('chulpan_name');

            if (popup_cd && popup_nm) {
                popup_cd.setValue(send_cd);
                popup_nm.setValue(send_nm);
            }
        });


        popup.on('selectUser', function(win, record) {
            const publisher_code_field = form.down('[name=sujumCd]');
            const publisher_name_field = form.down('[name=sujumNm]');
            publisher_code_field.setValue(record.get('custCd'));
            publisher_name_field.setValue(record.get('custAbbrNm'));
        });

        popup.show();
    },

    onButtonClick_cus_popup_button: function(button, e, eOpts) {
        const popup = Ext.create('dream.view.tpop.tpop1005');
        const me = this;

        popup.on('selectUser', function(win, record) {
            const form = me.lookupReference('detail_form');
            form.down('[name=delivPathCd]').setValue(record.get('cusCd'));
        });

        popup.show();
    },

    onDatefieldAfterRender_start_date: function(component, eOpts) {
        const view = this.getView();
        component.setValue(new Date());
        component.on('specialkey', function(component, e) {
            if (e.getKey() === e.ENTER) {
                const button = view.lookupReference('search_button');
                if (button) {
                    button.fireEvent('click', button);
                }
            }
        });
    },

    onPanelBeforeRender: function(component, eOpts) {
        dream.util.Common.loadCode('107');
        dream.util.Common.loadCode('111');
    }

});
