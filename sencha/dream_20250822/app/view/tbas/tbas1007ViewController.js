/*
 * File: app/view/tbas/tbas1007ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tbas.tbas1007ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbas.tbas1007',

    onButtonClick_excel_button: function(button, e, eOpts) {
        const grid = this.lookupReference('holiday_grid');
        dream.util.Common.exportGridToExcel(grid);
    },

    onButtonClick_search_button1: function(button, e, eOpts) {
        const view = this.getView();
        const startDateField = view.lookupReference('start_date');
        const endDateField = view.lookupReference('end_date');
        const grid = view.lookupReference('holiday_grid');

        const store = grid.getStore();

        // 날짜 포맷 함수
        const formatDate = (date) => {
            if (!date) return null;
            const y = date.getFullYear();
            const m = (date.getMonth() + 1).toString().padStart(2, '0');
            const d = date.getDate().toString().padStart(2, '0');
            return `${y}${m}${d}`;
        };

        // 날짜 가져오기 및 포맷 변환
        const startDate = formatDate(startDateField.getValue());
        const endDate = formatDate(endDateField.getValue());

        // 파라미터 설정 후 API 호출
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            startDate: startDate,
            endDate: endDate
        });

        store.load();
    },

    onGridpanelAfterRender_holiday_grid: function(component, eOpts) {

        const store = component.getStore();

        const today = new Date();
        const year = today.getFullYear();
        const startDate = year + '0101';
        const endDate = year + '1231';

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tbas/1007/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        store.getProxy().setExtraParams({
            userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            startDate: startDate,
            endDate: endDate
        });

        // 3. 스토어 리로드
        store.reload();
    },

    onGridpanelSelectionChange_holiday_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;

        const record = selected[0];
        const view = this.getView();
        const form = view.lookupReference('holiday_form').getForm();

        // 날짜 형식이 'YYYYMMDD' 이므로 Date 객체로 변환
        const rawDate = record.get('dday');
        const dateValue = Ext.Date.parse(rawDate, 'Ymd');

        form.setValues({
            dday: dateValue,
            ddayYo: record.get('ddayYo'),
            bigo: record.get('bigo')
        });
    },

    onButtonClick_add_button: function(button, e, eOpts) {
        const view = this.getView();
        const form = view.lookupReference('holiday_form').getForm();

        if (!form.isValid()) return;

        Ext.Msg.confirm('확인', '저장하시겠습니까?', function (choice) {
            if (choice === 'yes') {
                const values = form.getValues();
                const date = form.findField('dday').getValue();

                values.dday = Ext.Date.format(date, 'Ymd');
                values.userCetCd = dream.util.Common.LOGIN_USER_CET_CD;

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1007/save',
                    method: 'POST',
                    jsonData: values,
                    success: function () {
                        Ext.Msg.alert('성공', '저장되었습니다.');
                        view.lookupReference('holiday_grid').getStore().reload();
                    },
                    failure: function () {
                        Ext.Msg.alert('오류', '저장 중 오류가 발생했습니다.');
                    }
                });
            }
        });
    },

    onButtonClick_delete_button: function(button, e, eOpts) {
        const view = this.getView();
        const form = view.lookupReference('holiday_form').getForm();

        const values = form.getValues();
        if (!values.dday) {
            Ext.Msg.alert('안내', '삭제할 날짜를 선택해주세요.');
            return;
        }

        Ext.Msg.confirm('확인', '삭제하시겠습니까?', function (choice) {
            if (choice === 'yes') {
                const date = form.findField('dday').getValue();

                Ext.Ajax.request({
                    url: dream.util.Common.BASE_URL + '/tbas/1007/delete',
                    method: 'DELETE',
                    jsonData: {
                        dday: Ext.Date.format(date, 'Ymd'),
                        userCetCd: dream.util.Common.LOGIN_USER_CET_CD
                    },
                    success: function () {
                        Ext.Msg.alert('성공', '삭제되었습니다.');
                        form.reset();
                        view.lookupReference('holiday_grid').getStore().reload();
                    },
                    failure: function () {
                        Ext.Msg.alert('오류', '삭제 중 오류가 발생했습니다.');
                    }
                });
            }
        });
    },

    onPanelAfterRender: function(component, eOpts) {
        const view = this.getView();


        const now = new Date();
        const startOfYear = new Date(now.getFullYear(), 0, 1);   // 1월 1일
        const endOfYear = new Date(now.getFullYear(), 11, 31);   // 12월 31일


        const startDateField = view.lookupReference('start_date');
        const endDateField = view.lookupReference('end_date');

        if (startDateField) startDateField.setValue(startOfYear);
        if (endDateField) endDateField.setValue(endOfYear);
    }

});
