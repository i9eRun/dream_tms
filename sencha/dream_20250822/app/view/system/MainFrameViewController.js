/*
 * File: app/view/system/MainFrameViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.system.MainFrameViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.system.mainframe',

    onMainFrameLoad: function(component, eOpts) {
        const tree        = Ext.ComponentQuery.query('#menuTree')[0];
        const topTabPanel = Ext.ComponentQuery.query('#mainTopTabPanel')[0];
        const bottomTabs  = Ext.ComponentQuery.query('#mainBottomTabPanel')[0];
        const content     = Ext.ComponentQuery.query('#mainContentPanel')[0];

        // 트리 클릭 → 프로그램 열기
        tree.on('itemclick', function (view, record) {
            if (record.isLeaf()) {
                const menuId = record.getId();
                const menuNm = record.get('text');

                dream.util.Common.loadProgram(menuId, menuNm);

            }
        });

        // 하단 탭 전환 시 → 해당 카드 활성화
        bottomTabs.on('tabchange', (tp, newTab) => {
            const reg = dream.util.Common.cache[newTab.menuId];
            if (reg && reg.view) {
                content.getLayout().setActiveItem(reg.view);
            }
        });

        // 메뉴 트리 데이터 로드
        Ext.Ajax.request({
            url: dream.util.Common.BASE_URL + '/system/menu/tree',
            method: 'POST',
            jsonData:{
                user_id : dream.util.Common.LOGIN_USER,
                user_cet_cd : dream.util.Common.LOGIN_USER_CET_CD
            },
            success:(res) => {
                const temp_menus  = Ext.decode(res.responseText);
                const level1Menus = temp_menus[0].children;

                level1Menus.forEach((menu) => {
                    topTabPanel.add({
                        title   : menu.menuNm,
                        itemId  : menu.menuId,
                        closable: false,
                        listeners:{
                            activate: () => {
                                const treeRoot = {
                                    expanded: true,
                                    children: (menu.children || []).map((level2) => ({
                                        text    : level2.menuNm,
                                        id      : level2.menuId,
                                        expanded: true,
                                        children: (level2.children || []).map((child) => ({
                                            text: child.menuNm,
                                            id  : child.menuId,
                                            leaf: true
                                        }))
                                    }))
                                };
                                tree.setRootNode(treeRoot);
                            }
                        }
                    });
                });

                if (level1Menus.length > 0) {
                    topTabPanel.setActiveTab(0);
                    topTabPanel.items.items[0].fireEvent('activate');
                }
            }
        });

    }

});
