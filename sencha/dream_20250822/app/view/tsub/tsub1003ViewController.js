/*
 * File: app/view/tsub/tsub1003ViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.7.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.9.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.9.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('dream.view.tsub.tsub1003ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tsub.tsub1003',

    onDatefieldAfterRender_start_date: function(component, eOpts) {
        component.setValue(new Date());
    },

    onComboboxAfterRender_cus_gb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1001,true);
    },

    onComboboxAfterRender_cus_ampm_gb: function(component, eOpts) {
        dream.util.Common.setComboCode(component,1003,true);
    },

    onTextfieldAfterRender_cus_cd: function(component, eOpts) {
        component.inputEl.on('click', function () {
            let popup = Ext.WindowManager.get('cus_cd_popup'); // 이미 열렸는지 확인

            if (!popup) {
                popup = Ext.create('dream.view.tpop.tpop1005', {
                    id: 'cus_cd_popup' // 팝업창에 고유 Id 지정
                });

                popup.on('selectUser', function(win, record) {
                    component.setValue(record.get('cusCd'));
                });

                popup.show();
            } else {
                popup.toFront(); // 이미 팝업창이 열려있으면 앞으로 가져오기
            }

        });


    },

    onButtonClick_search_button: function(button, e, eOpts) {
        const infoDate = this.lookupReference('info_date').getSubmitValue();
        const cus_gb = this.lookupReference('cus_gb').getValue();
        const cus_ampm_gb = this.lookupReference('cus_ampm_gb').getValue();

        const store = this.lookupReference('list_grid').getStore();
        const detail_store = this.lookupReference('detail_grid').getStore();
        detail_store.removeAll();
        this.lookupReference('detail_grid').getView().refresh();

        const detail_course_name = this.lookupReference('detail_course_name').reset();
        const detail_driver = this.lookupReference('detail_driver').reset();
        const detail_total_qty = this.lookupReference('detail_total_qty').reset();
        const detail_total_box = this.lookupReference('detail_total_box').reset();
        const cus_cd = this.lookupReference('cus_cd').getValue();


        if (!infoDate) {
            Ext.Msg.alert('오류', '올바른 날짜를 선택해주세요');
            return;
        }

        store.getProxy().setExtraParams({
            //userCetCd: dream.util.Common.LOGIN_USER_CET_CD,
            infoDate: infoDate,
            cusGb: cus_gb,
            cusAmpmGb: cus_ampm_gb,
            cusCd: cus_cd
        });

        store.load();

    },

    onGridpanelAfterRender_list_grid: function(component, eOpts) {
        const store = component.getStore();

        // 1. proxy의 URL을 동적으로 설정
        store.getProxy().setUrl(dream.util.Common.BASE_URL+'/tsub/1003/list');

        // 2. 필요 시 추가 파라미터 설정 (예: userCetCd 등)
        // store.getProxy().setExtraParams({
        //     userCetCd: dream.util.Common.LOGIN_USER_CET_CD
        // });

    },

    onGridpanelSelectionChange_list_grid: function(model, selected, eOpts) {
        if (!selected.length) return;

        const courseCode = selected[0].get('courseCode');
        const infoDate   = this.lookupReference('info_date').getSubmitValue();

        // 1. 상단 텍스트필드 세팅
        this.lookupReference('detail_course_name').setValue(selected[0].get('courseName'));
        this.lookupReference('detail_driver').setValue(selected[0].get('comuserName'));
        this.lookupReference('detail_total_qty')
        .setRawValue(Ext.util.Format.number(selected[0].get('totalBusu'), '0,000'));
        this.lookupReference('detail_total_box')
        .setRawValue(Ext.util.Format.number(selected[0].get('totalDungE'), '0,000'));

        // 2. 디테일 그리드 store 가져오기
        const detailStore = this.lookupReference('detail_grid').getStore();

        // 3. proxy URL 및 파라미터 세팅
        detailStore.getProxy().setUrl(dream.util.Common.BASE_URL + '/tsub/1003/detail');
        detailStore.getProxy().setExtraParams({
            infoDate: infoDate,
            courseCode: courseCode
        });

        // 4. 로드 실행
        detailStore.load();


    },

    onGridpanelViewReady_list_grid: function(tablepanel, eOpts) {
        const grid = this.lookupReference('list_grid');
        dream.util.Common.applyNumberColumnFormat(grid, [
        'totalBusu',
        'totalDungE'
        ]);
    },

    onGridpanelViewReady_detail_grid: function(tablepanel, eOpts) {
        const grid = this.lookupReference('detail_grid');
        dream.util.Common.applyNumberColumnFormat(grid, [
        'infoBusu',
        'infoDungE'
        ]);
    },

    onGridpanelSelectionChange_detail_grid: function(model, selected, eOpts) {
        if (selected.length === 0) return;


        const rec = selected[0];
        const finalFile = rec.get('infoCustSign');
        const initialFile = rec.get('infoInitalingSign');

        let kind = null, file = null;

        if (finalFile) {
            kind = 'final';
            file = finalFile;
        } else if (initialFile) {
            kind = 'initial';
            file = initialFile;
        }

        const panel = this.lookupReference('sign_image');
        panel.removeAll();

        if (file) {
            const url = dream.util.Common.BASE_URL + '/api/images/' + kind + '/' + encodeURIComponent(file) + '.png' + '?_v=' + Date.now();

            panel.add({
                xtype: 'image',
                src: url,
                style: {
                    'max-width': '100%',
                    'max-height': '100%',
                    'object-fit': 'contain'
                }
            });

        } else {
            panel.add({
                xtype: 'box',
                html: '<div style="padding:20px;color:#888;">서명 없음</div>'
            });
        }



    }

});
